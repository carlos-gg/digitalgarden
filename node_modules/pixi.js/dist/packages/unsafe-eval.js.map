{"version":3,"file":"unsafe-eval.js","sources":["../../src/utils/data/ViewableBuffer.ts","../../src/scene/particle-container/shared/utils/createIndicesForQuads.ts","../../src/scene/particle-container/shared/utils/generateParticleUpdateFunction.ts","../../src/scene/particle-container/shared/ParticleBuffer.ts","../../src/unsafe-eval/particle/particleUpdateFunctions.ts","../../src/unsafe-eval/particle/generateParticleUpdatePolyfill.ts","../../src/unsafe-eval/shader/generateShaderSyncPolyfill.ts","../../src/unsafe-eval/ubo/uboSyncFunctions.ts","../../src/unsafe-eval/ubo/generateUboSyncPolyfill.ts","../../src/unsafe-eval/uniforms/uniformSyncFunctions.ts","../../src/unsafe-eval/uniforms/generateUniformsSyncPolyfill.ts","../../src/unsafe-eval/init.ts"],"sourcesContent":["type TypedArray = Float32Array | Uint32Array | Int32Array | Uint8Array;\n\n/**\n * Flexible wrapper around `ArrayBuffer` that also provides typed array views on demand.\n * @memberof utils\n */\nexport class ViewableBuffer\n{\n    /** The size of the buffer in bytes. */\n    public size: number;\n\n    /** Underlying `ArrayBuffer` that holds all the data and is of capacity `this.size`. */\n    public rawBinaryData: ArrayBuffer;\n\n    /** View on the raw binary data as a `Uint32Array`. */\n    public uint32View: Uint32Array;\n\n    /** View on the raw binary data as a `Float32Array`. */\n    public float32View: Float32Array;\n    public uint16View: Uint16Array;\n\n    private _int8View: Int8Array;\n    private _uint8View: Uint8Array;\n    private _int16View: Int16Array;\n    private _int32View: Int32Array;\n    private _float64Array: Float64Array;\n    private _bigUint64Array: BigUint64Array;\n\n    /**\n     * @param length - The size of the buffer in bytes.\n     */\n    constructor(length: number);\n\n    /**\n     * @param arrayBuffer - The source array buffer.\n     */\n    constructor(arrayBuffer: ArrayBuffer);\n\n    constructor(sizeOrBuffer: number | ArrayBuffer | Uint8Array)\n    {\n        if (typeof sizeOrBuffer === 'number')\n        {\n            this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n        }\n        else if (sizeOrBuffer instanceof Uint8Array)\n        {\n            this.rawBinaryData = sizeOrBuffer.buffer;\n        }\n        else\n        {\n            this.rawBinaryData = sizeOrBuffer;\n        }\n\n        this.uint32View = new Uint32Array(this.rawBinaryData);\n        this.float32View = new Float32Array(this.rawBinaryData);\n\n        this.size = this.rawBinaryData.byteLength;\n    }\n\n    /** View on the raw binary data as a `Int8Array`. */\n    get int8View(): Int8Array\n    {\n        if (!this._int8View)\n        {\n            this._int8View = new Int8Array(this.rawBinaryData);\n        }\n\n        return this._int8View;\n    }\n\n    /** View on the raw binary data as a `Uint8Array`. */\n    get uint8View(): Uint8Array\n    {\n        if (!this._uint8View)\n        {\n            this._uint8View = new Uint8Array(this.rawBinaryData);\n        }\n\n        return this._uint8View;\n    }\n\n    /**  View on the raw binary data as a `Int16Array`. */\n    get int16View(): Int16Array\n    {\n        if (!this._int16View)\n        {\n            this._int16View = new Int16Array(this.rawBinaryData);\n        }\n\n        return this._int16View;\n    }\n\n    /** View on the raw binary data as a `Int32Array`. */\n    get int32View(): Int32Array\n    {\n        if (!this._int32View)\n        {\n            this._int32View = new Int32Array(this.rawBinaryData);\n        }\n\n        return this._int32View;\n    }\n\n    /** View on the raw binary data as a `Float64Array`. */\n    get float64View(): Float64Array\n    {\n        if (!this._float64Array)\n        {\n            this._float64Array = new Float64Array(this.rawBinaryData);\n        }\n\n        return this._float64Array;\n    }\n\n    /** View on the raw binary data as a `BigUint64Array`. */\n    get bigUint64View(): BigUint64Array\n    {\n        if (!this._bigUint64Array)\n        {\n            this._bigUint64Array = new BigUint64Array(this.rawBinaryData);\n        }\n\n        return this._bigUint64Array;\n    }\n\n    /**\n     * Returns the view of the given type.\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *    `uint16`, `int32`, `uint32`, and `float32`.\n     * @returns - typed array of given type\n     */\n    public view(type: string): TypedArray\n    {\n        return (this as any)[`${type}View`];\n    }\n\n    /** Destroys all buffer references. Do not use after calling this. */\n    public destroy(): void\n    {\n        this.rawBinaryData = null;\n        this._int8View = null;\n        this._uint8View = null;\n        this._int16View = null;\n        this.uint16View = null;\n        this._int32View = null;\n        this.uint32View = null;\n        this.float32View = null;\n    }\n\n    /**\n     * Returns the size of the given type in bytes.\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *   `uint16`, `int32`, `uint32`, and `float32`.\n     * @returns - size of the type in bytes\n     */\n    public static sizeOf(type: string): number\n    {\n        switch (type)\n        {\n            case 'int8':\n            case 'uint8':\n                return 1;\n            case 'int16':\n            case 'uint16':\n                return 2;\n            case 'int32':\n            case 'uint32':\n            case 'float32':\n                return 4;\n            default:\n                throw new Error(`${type} isn't a valid view type`);\n        }\n    }\n}\n","/**\n * Generic Mask Stack data structure\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n */\nexport function createIndicesForQuads(\n    size: number,\n    outBuffer: Uint16Array | Uint32Array | null = null\n): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    // Check if we need to use Uint32Array\n    if (totalIndices > 65535)\n    {\n        outBuffer = outBuffer || new Uint32Array(totalIndices); // Use Uint32Array if needed\n    }\n    else\n    {\n        outBuffer = outBuffer || new Uint16Array(totalIndices);\n    }\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n","import {\n    getAttributeInfoFromFormat\n} from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { IParticle } from '../Particle';\nimport type { ParticleRendererProperty } from '../particleData';\n\n// TODO rename to update function\nexport type ParticleUpdateFunction = (ps: IParticle[], f32v: Float32Array, u32v: Uint32Array) => void;\n\nexport function generateParticleUpdateFunction(properties: Record<string, ParticleRendererProperty>)\n{\n    return {\n        dynamicUpdate: generateUpdateFunction(properties, true),\n        staticUpdate: generateUpdateFunction(properties, false),\n    };\n}\n\nfunction generateUpdateFunction(\n    properties: Record<string, ParticleRendererProperty>,\n    dynamic: boolean\n): ParticleUpdateFunction\n{\n    const funcFragments: string[] = [];\n\n    funcFragments.push(`\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n\n    let offset = 0;\n\n    for (const i in properties)\n    {\n        const property = properties[i];\n\n        if (dynamic !== property.dynamic) continue;\n\n        funcFragments.push(`offset = index + ${offset}`);\n\n        funcFragments.push(property.code);\n\n        const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n        offset += attributeInfo.stride / 4;\n    }\n\n    funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n\n    // add to the front..\n    funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n\n    const functionSource = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('ps', 'f32v', 'u32v', functionSource) as ParticleUpdateFunction;\n}\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { IParticle } from './Particle';\nimport type { ParticleRendererProperty } from './particleData';\nimport type { ParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\n/**\n * Options for creating a ParticleBuffer.\n * @property {number} size - The size of the particle buffer.\n * @property {Record<string, ParticleRendererProperty>} properties - A record of attributes that the particle container uses.\n */\nexport interface ParticleBufferOptions\n{\n    size: number;\n    properties: Record<string, ParticleRendererProperty>;\n}\n\n/**\n * The ParticleBuffer holds the buffers and geometry for a particle container.\n * It also contains the upload functions for the static and dynamic properties.\n * @internal\n */\nexport class ParticleBuffer\n{\n    /** The buffer containing static attribute data for all elements in the batch. */\n    public staticAttributeBuffer: ViewableBuffer;\n    /** The buffer containing dynamic attribute data for all elements in the batch. */\n    public dynamicAttributeBuffer: ViewableBuffer;\n\n    private readonly _staticBuffer: Buffer;\n    private readonly _dynamicBuffer: Buffer;\n\n    /** The buffer containing index data for all elements in the batch. */\n    public indexBuffer: IndexBufferArray;\n\n    private readonly _dynamicStride: number;\n    private readonly _staticStride: number;\n\n    /** The geometry of the particle buffer. */\n    public readonly geometry: Geometry;\n\n    private _size = 0;\n    private readonly _dynamicUpload: ParticleUpdateFunction;\n    private readonly _staticUpload: ParticleUpdateFunction;\n    private readonly _generateParticleUpdateCache: Record<string, {\n        dynamicUpdate: ParticleUpdateFunction;\n        staticUpdate: ParticleUpdateFunction;\n    }> = {};\n\n    constructor(options: ParticleBufferOptions)\n    {\n        // size in sprites!\n        const size = this._size = options.size ?? 1000;\n\n        // TODO add the option to specify what is dynamic!\n        const properties = options.properties;\n\n        // in bytes!\n        let staticVertexSize = 0;\n        let dynamicVertexSize = 0;\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                // dynamic.\n                dynamicVertexSize += attributeInfo.stride;\n            }\n            else\n            {\n                // static.\n                staticVertexSize += attributeInfo.stride;\n            }\n        }\n\n        this._dynamicStride = dynamicVertexSize / 4;\n        this._staticStride = staticVertexSize / 4;\n\n        this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n        this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n\n        this.indexBuffer = createIndicesForQuads(size);\n\n        // build geometry..\n\n        const geometry = new Geometry();\n\n        let dynamicOffset = 0;\n        let staticOffset = 0;\n\n        this._staticBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'static-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        this._dynamicBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'dynamic-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._dynamicBuffer,\n                    stride: this._dynamicStride * 4,\n                    offset: dynamicOffset * 4,\n                    format: property.format,\n                });\n                dynamicOffset += attributeInfo.size;\n            }\n            else\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._staticBuffer,\n                    stride: this._staticStride * 4,\n                    offset: staticOffset * 4,\n                    format: property.format,\n                });\n                staticOffset += attributeInfo.size;\n            }\n        }\n\n        geometry.addIndex(this.indexBuffer);\n\n        const uploadFunction = this.getParticleUpdate(properties);\n\n        this._dynamicUpload = uploadFunction.dynamicUpdate;\n        this._staticUpload = uploadFunction.staticUpdate;\n\n        this.geometry = geometry;\n    }\n\n    public getParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        const key = getParticleSyncKey(properties);\n\n        if (this._generateParticleUpdateCache[key])\n        {\n            return this._generateParticleUpdateCache[key];\n        }\n\n        this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n\n        return this._generateParticleUpdateCache[key];\n    }\n\n    public generateParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        return generateParticleUpdateFunction(properties);\n    }\n\n    public update(particles: IParticle[], uploadStatic: boolean)\n    {\n        // first resize the buffers if needed!\n        // TODO resize!\n        if (particles.length > this._size)\n        {\n            uploadStatic = true;\n\n            this._size = Math.max(particles.length, (this._size * 1.5) | 0);\n\n            this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n            this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n            this.indexBuffer = createIndicesForQuads(this._size);\n\n            this.geometry.indexBuffer.setDataWithSize(\n                this.indexBuffer, this.indexBuffer.byteLength, true);\n        }\n\n        const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n\n        this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n\n        this._dynamicBuffer.setDataWithSize(\n            this.dynamicAttributeBuffer.float32View, particles.length * this._dynamicStride * 4, true);\n\n        if (uploadStatic)\n        {\n            const staticAttributeBuffer = this.staticAttributeBuffer;\n\n            this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n\n            this._staticBuffer.setDataWithSize(\n                staticAttributeBuffer.float32View, particles.length * this._staticStride * 4, true);\n        }\n    }\n\n    public destroy()\n    {\n        this._staticBuffer.destroy();\n        this._dynamicBuffer.destroy();\n        this.geometry.destroy();\n    }\n}\n\nfunction getParticleSyncKey(properties: Record<string, ParticleRendererProperty>)\n{\n    const keyGen: string[] = [];\n\n    for (const key in properties)\n    {\n        const property = properties[key];\n\n        keyGen.push(key, property.code, property.dynamic ? 'd' : 's');\n    }\n\n    return keyGen.join('_');\n}\n\n","import type { IParticle } from '../../scene/particle-container/shared/Particle';\n\nexport const particleUpdateFunctions = {\n    aVertex: (ps: IParticle[], f32v: Float32Array, _u32v: Uint32Array, offset: number, stride: number) =>\n    {\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n            const texture = p.texture;\n            const sx = p.scaleX;\n            const sy = p.scaleY;\n            const ax = p.anchorX;\n            const ay = p.anchorY;\n\n            const trim = texture.trim;\n            const orig = texture.orig;\n\n            if (trim)\n            {\n                w1 = trim.x - (ax * orig.width);\n                w0 = w1 + trim.width;\n\n                h1 = trim.y - (ay * orig.height);\n                h0 = h1 + trim.height;\n            }\n            else\n            {\n                w0 = (orig.width) * (1 - ax);\n                w1 = (orig.width) * -ax;\n\n                h0 = orig.height * (1 - ay);\n                h1 = orig.height * -ay;\n            }\n\n            f32v[offset] = w1 * sx;\n            f32v[offset + 1] = h1 * sy;\n\n            f32v[offset + stride] = w0 * sx;\n            f32v[offset + stride + 1] = h1 * sy;\n\n            f32v[offset + (stride * 2)] = w0 * sx;\n            f32v[offset + (stride * 2) + 1] = h0 * sy;\n\n            f32v[offset + (stride * 3)] = w1 * sx;\n            f32v[offset + (stride * 3) + 1] = h0 * sy;\n\n            offset += stride * 4;\n        }\n    },\n    aPosition: (ps: IParticle[], f32v: Float32Array, _u32v: Uint32Array, offset: number, stride: number) =>\n    {\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n            const x = p.x;\n            const y = p.y;\n\n            f32v[offset] = x;\n            f32v[offset + 1] = y;\n\n            f32v[offset + stride] = x;\n            f32v[offset + stride + 1] = y;\n\n            f32v[offset + (stride * 2)] = x;\n            f32v[offset + (stride * 2) + 1] = y;\n\n            f32v[offset + (stride * 3)] = x;\n            f32v[offset + (stride * 3) + 1] = y;\n\n            offset += stride * 4;\n        }\n    },\n    aRotation: (ps: IParticle[], f32v: Float32Array, _u32v: Uint32Array, offset: number, stride: number) =>\n    {\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const rotation = ps[i].rotation;\n\n            f32v[offset] = rotation;\n            f32v[offset + stride] = rotation;\n            f32v[offset + (stride * 2)] = rotation;\n            f32v[offset + (stride * 3)] = rotation;\n\n            offset += stride * 4;\n        }\n    },\n    aUV: (ps: IParticle[], f32v: Float32Array, _u32v: Uint32Array, offset: number, stride: number) =>\n    {\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const uvs = ps[i].texture.uvs;\n\n            f32v[offset] = uvs.x0;\n            f32v[offset + 1] = uvs.y0;\n\n            f32v[offset + stride] = uvs.x1;\n            f32v[offset + stride + 1] = uvs.y1;\n\n            f32v[offset + (stride * 2)] = uvs.x2;\n            f32v[offset + (stride * 2) + 1] = uvs.y2;\n\n            f32v[offset + (stride * 3)] = uvs.x3;\n            f32v[offset + (stride * 3) + 1] = uvs.y3;\n\n            offset += stride * 4;\n        }\n    },\n    aColor: (ps: IParticle[], _f32v: Float32Array, u32v: Uint32Array, offset: number, stride: number) =>\n    {\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const c = ps[i].color;\n\n            u32v[offset] = c;\n            u32v[offset + stride] = c;\n            u32v[offset + (stride * 2)] = c;\n            u32v[offset + (stride * 3)] = c;\n\n            offset += stride * 4;\n        }\n    }\n};\n","import { getAttributeInfoFromFormat } from '../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\nimport { particleUpdateFunctions } from './particleUpdateFunctions';\n\nimport type { IParticle } from '../../scene/particle-container/shared/Particle';\nimport type { ParticleRendererProperty } from '../../scene/particle-container/shared/particleData';\n\n// eslint-disable-next-line max-len\nexport type ParticleUpdateFunction = (ps: IParticle[], f32v: Float32Array, u32v: Uint32Array, offset: number, stride: number) => void;\n\nexport function generateParticleUpdatePolyfill(properties: ParticleRendererProperty[])\n{\n    const dynamicProperties = properties.filter((p) => p.dynamic);\n    const staticProperties = properties.filter((p) => !p.dynamic);\n\n    return {\n        dynamicUpdate: generateUpdateFunction(dynamicProperties),\n        staticUpdate: generateUpdateFunction(staticProperties),\n    };\n}\n\nfunction generateUpdateFunction(properties: ParticleRendererProperty[]): ParticleUpdateFunction\n{\n    let stride = 0;\n\n    const updateData: { stride: number; updateFunction: ParticleUpdateFunction }[] = [];\n\n    for (let i = 0; i < properties.length; i++)\n    {\n        const property = properties[i];\n\n        const attributeStride = getAttributeInfoFromFormat(property.format).stride / 4;\n\n        stride += attributeStride;\n\n        updateData.push({\n            stride: attributeStride,\n            updateFunction:\n            property.updateFunction\n            || particleUpdateFunctions[property.attributeName as keyof typeof particleUpdateFunctions]\n        });\n    }\n\n    return (ps: IParticle[], f32v: Float32Array, u32v: Uint32Array) =>\n    {\n        let offset = 0;\n\n        for (let i = 0; i < updateData.length; i++)\n        {\n            const obx = updateData[i];\n\n            obx.updateFunction(ps, f32v, u32v, offset, stride);\n            offset += obx.stride;\n        }\n    };\n}\n","import { BufferResource } from '../../rendering/renderers/shared/buffer/BufferResource';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport { TextureSource } from '../../rendering/renderers/shared/texture/sources/TextureSource';\nimport { TextureStyle } from '../../rendering/renderers/shared/texture/TextureStyle';\n\nimport type { ShaderSyncData, ShaderSyncFunction } from '../../rendering/renderers/gl/shader/GlShaderSystem';\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { Shader } from '../../rendering/renderers/shared/shader/Shader';\n\nexport function generateShaderSyncPolyfill(): ShaderSyncFunction\n{\n    return syncShader;\n}\n\nfunction syncShader(renderer: WebGLRenderer, shader: Shader, syncData: ShaderSyncData): void\n{\n    const gl = renderer.gl;\n    const shaderSystem = renderer.shader;\n    const programData = shaderSystem._getProgramData(shader.glProgram);\n\n    // loop through the groups and sync everything...\n    for (const i in shader.groups)\n    {\n        const bindGroup = shader.groups[i];\n\n        for (const j in bindGroup.resources)\n        {\n            const resource = bindGroup.resources[j];\n\n            if (resource instanceof UniformGroup)\n            {\n                if (resource.ubo)\n                {\n                    shaderSystem.bindUniformBlock(\n                        resource,\n                        shader._uniformBindMap[i as unknown as number][j as unknown as number],\n                        syncData.blockIndex++\n                    );\n                }\n                else\n                {\n                    shaderSystem.updateUniformGroup(resource);\n                }\n            }\n            else if (resource instanceof BufferResource)\n            {\n                shaderSystem.bindUniformBlock(\n                    resource,\n                    shader._uniformBindMap[i as unknown as number][j as unknown as number],\n                    syncData.blockIndex++\n                );\n            }\n            else if (resource instanceof TextureSource)\n            {\n                // TODO really we should not be binding the sampler here too\n                renderer.texture.bind(resource, syncData.textureCount);\n\n                const uniformName = shader._uniformBindMap[i as unknown as number][j as unknown as number];\n\n                const uniformData = programData.uniformData[uniformName];\n\n                if (uniformData)\n                {\n                    if (uniformData.value !== syncData.textureCount)\n                    {\n                        gl.uniform1i(uniformData.location, syncData.textureCount);\n                    }\n\n                    syncData.textureCount++;\n                }\n            }\n            else if (resource instanceof TextureStyle)\n            {\n                // TODO not doing anything here works is assuming that textures are bound with the style they own.\n                // this.renderer.texture.bindSampler(resource, syncData.textureCount);\n            }\n        }\n    }\n}\n","/**\n * This file is auto generated by scripts/utils/autoGenerateUnsafeEvalFunctions.ts\n * Do not edit manually - or you will be sad.\n */\n\nimport type { UNIFORM_TYPES } from '../../rendering/renderers/shared/shader/types';\n\nexport type UboUploadFunction = (name: string, data: Float32Array, offset: number, uv: any, v: any) => void;\nexport const uboParserFunctions: UboUploadFunction[] = [\n    (name: string, data: Float32Array, offset: number, uv: any, _v: any): void =>\n    {\n        const matrix = uv[name].toArray(true);\n\n        data[offset] = matrix[0];\n        data[offset + 1] = matrix[1];\n        data[offset + 2] = matrix[2];\n        data[offset + 4] = matrix[3];\n        data[offset + 5] = matrix[4];\n        data[offset + 6] = matrix[5];\n        data[offset + 8] = matrix[6];\n        data[offset + 9] = matrix[7];\n        data[offset + 10] = matrix[8];\n    },\n    (name: string, data: Float32Array, offset: number, uv: any, v: any): void =>\n    {\n        v = uv[name];\n        data[offset] = v.x;\n        data[offset + 1] = v.y;\n        data[offset + 2] = v.width;\n        data[offset + 3] = v.height;\n    },\n    (name: string, data: Float32Array, offset: number, uv: any, v: any): void =>\n    {\n        v = uv[name];\n        data[offset] = v.x;\n        data[offset + 1] = v.y;\n    },\n    (name: string, data: Float32Array, offset: number, uv: any, v: any): void =>\n    {\n        v = uv[name];\n        data[offset] = v.red;\n        data[offset + 1] = v.green;\n        data[offset + 2] = v.blue;\n        data[offset + 3] = v.alpha;\n    },\n    (name: string, data: Float32Array, offset: number, uv: any, v: any): void =>\n    {\n        v = uv[name];\n        data[offset] = v.red;\n        data[offset + 1] = v.green;\n        data[offset + 2] = v.blue;\n    },\n];\nexport const uboSingleFunctionsWGSL: Record<UNIFORM_TYPES | string, UboUploadFunction> = {\n    f32: (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v;\n    },\n    i32: (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v;\n    },\n    'vec2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n    },\n    'vec3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n    },\n    'vec4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    },\n    'mat2x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    },\n    'mat3x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];\n    },\n    'mat4x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 16; i++)\n        {\n            data[offset + i] = v[i];\n        }\n    },\n    'mat3x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            data[offset + (((i / 3) | 0) * 4) + (i % 3)] = v[i];\n        }\n    },\n    'mat4x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 8; i++)\n        {\n            data[offset + (((i / 4) | 0) * 4) + (i % 4)] = v[i];\n        }\n    },\n    'mat2x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            data[offset + (((i / 2) | 0) * 4) + (i % 2)] = v[i];\n        }\n    },\n    'mat4x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 12; i++)\n        {\n            data[offset + (((i / 4) | 0) * 4) + (i % 4)] = v[i];\n        }\n    },\n    'mat2x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 8; i++)\n        {\n            data[offset + (((i / 2) | 0) * 4) + (i % 2)] = v[i];\n        }\n    },\n    'mat3x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 12; i++)\n        {\n            data[offset + (((i / 3) | 0) * 4) + (i % 3)] = v[i];\n        }\n    },\n};\nexport const uboSingleFunctionsSTD40: Record<UNIFORM_TYPES | string, UboUploadFunction> = {\n    f32: (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v;\n    },\n    i32: (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v;\n    },\n    'vec2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n    },\n    'vec3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n    },\n    'vec4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    },\n    'mat2x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];\n    },\n    'mat3x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];\n    },\n    'mat4x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 16; i++)\n        {\n            data[offset + i] = v[i];\n        }\n    },\n    'mat3x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            data[offset + (((i / 3) | 0) * 4) + (i % 3)] = v[i];\n        }\n    },\n    'mat4x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 8; i++)\n        {\n            data[offset + (((i / 4) | 0) * 4) + (i % 4)] = v[i];\n        }\n    },\n    'mat2x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            data[offset + (((i / 2) | 0) * 4) + (i % 2)] = v[i];\n        }\n    },\n    'mat4x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 12; i++)\n        {\n            data[offset + (((i / 4) | 0) * 4) + (i % 4)] = v[i];\n        }\n    },\n    'mat2x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 8; i++)\n        {\n            data[offset + (((i / 2) | 0) * 4) + (i % 2)] = v[i];\n        }\n    },\n    'mat3x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 12; i++)\n        {\n            data[offset + (((i / 3) | 0) * 4) + (i % 3)] = v[i];\n        }\n    },\n};\n","import { WGSL_TO_STD40_SIZE } from '../../rendering/renderers/gl/shader/utils/createUboElementsSTD40';\nimport { WGSL_ALIGN_SIZE_DATA } from '../../rendering/renderers/gpu/shader/utils/createUboElementsWGSL';\nimport { uniformParsers } from '../../rendering/renderers/shared/shader/utils/uniformParsers';\nimport { uboParserFunctions, uboSingleFunctionsSTD40, uboSingleFunctionsWGSL } from './uboSyncFunctions';\n\nimport type { UboElement, UniformsSyncCallback } from '../../rendering/renderers/shared/shader/types';\nimport type { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport type { UboUploadFunction } from './uboSyncFunctions';\n\nexport function generateUboSyncPolyfillSTD40(uboElements: UboElement[]): UniformsSyncCallback\n{\n    return generateUboSyncPolyfill(\n        uboElements,\n        uboSingleFunctionsSTD40,\n        (uboElement: UboElement) =>\n        {\n            const rowSize = Math.max(WGSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);\n            const elementSize = (uboElement.data.value as Array<number>).length / uboElement.data.size;// size / rowSize;\n            const remainder = (4 - (elementSize % 4)) % 4;\n\n            return (_name: string, data: Float32Array, offset: number, _uv: any, v: any) =>\n            {\n                let t = 0;\n\n                for (let i = 0; i < (uboElement.data.size * rowSize); i++)\n                {\n                    for (let j = 0; j < elementSize; j++)\n                    {\n                        data[offset++] = v[t++];\n                    }\n\n                    offset += remainder;\n                }\n            };\n        }\n\n    );\n}\n\nexport function generateUboSyncPolyfillWGSL(uboElements: UboElement[]): UniformsSyncCallback\n{\n    return generateUboSyncPolyfill(\n        uboElements,\n        uboSingleFunctionsWGSL,\n        (uboElement: UboElement) =>\n        {\n            const { size, align } = WGSL_ALIGN_SIZE_DATA[uboElement.data.type];\n\n            const remainder = (size - align) / 4;\n\n            return (_name: string, data: Float32Array, offset: number, _uv: any, v: any) =>\n            {\n                let t = 0;\n\n                for (let i = 0; i < uboElement.data.size * (size / 4); i++)\n                {\n                    for (let j = 0; j < (size / 4); j++)\n                    {\n                        data[offset++] = v[t++];\n                    }\n                    offset += remainder;\n                }\n            };\n        }\n    );\n}\n\nfunction generateUboSyncPolyfill(\n    uboElements: UboElement[],\n    uboFunctions: Record<string, UboUploadFunction>,\n    arrayUploadFunction: (uboElement: UboElement) => UboUploadFunction\n): UniformsSyncCallback\n{\n    // loop through all the uniforms..\n    const functionMap: Record<string, {offset: number, func: UboUploadFunction}> = {};\n\n    for (const i in uboElements)\n    {\n        const uboElement = uboElements[i];\n        const uniform = uboElement.data;\n\n        let parsed = false;\n\n        functionMap[uniform.name] = {\n            offset: uboElement.offset / 4,\n            func: null\n        };\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const parser = uniformParsers[j];\n\n            if (uniform.type === parser.type && parser.test(uniform))\n            {\n                functionMap[uniform.name].func = uboParserFunctions[j];\n\n                parsed = true;\n\n                break;\n            }\n        }\n\n        // if not parsed...\n\n        if (!parsed)\n        {\n            if (uniform.size === 1)\n            {\n                functionMap[uniform.name].func = uboFunctions[uniform.type];\n            }\n            else\n            {\n                functionMap[uniform.name].func = arrayUploadFunction(uboElement);\n            }\n        }\n    }\n\n    return (\n        uniforms: UniformGroup,\n        data: Float32Array,\n        offset: number\n    ) =>\n    {\n        for (const i in functionMap)\n        {\n            functionMap[i].func(i, data, offset + functionMap[i].offset, uniforms, uniforms[i as keyof typeof uniforms]);\n        }\n    };\n}\n","/**\n * This file is auto generated by scripts/utils/autoGenerateUnsafeEvalFunctions.ts\n * Do not edit manually - or you will be sad.\n */\n\nimport type { UNIFORM_TYPES } from '../../rendering/renderers/shared/shader/types';\n\nexport type UniformUploadFunction = (name: string, cu: any, cv: any, v: any, ud: any, uv: any, gl: any) => void;\n\nexport const uniformSingleParserFunctions: Record<UNIFORM_TYPES | string, UniformUploadFunction> = {\n    f32(name: string, cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv !== v)\n        {\n            cu.value = v;\n            gl.uniform1f(ud[name].location, v);\n        }\n    },\n    'vec2<f32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2f(ud[name].location, v[0], v[1]);\n        }\n    },\n    'vec3<f32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3f(ud[name].location, v[0], v[1], v[2]);\n        }\n    },\n    'vec4<f32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4f(ud[name].location, v[0], v[1], v[2], v[3]);\n        }\n    },\n    i32(name: string, cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv !== v)\n        {\n            cu.value = v;\n            gl.uniform1i(ud[name].location, v);\n        }\n    },\n    'vec2<i32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(ud[name].location, v[0], v[1]);\n        }\n    },\n    'vec3<i32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(ud[name].location, v[0], v[1], v[2]);\n        }\n    },\n    'vec4<i32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(ud[name].location, v[0], v[1], v[2], v[3]);\n        }\n    },\n    u32(name: string, cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv !== v)\n        {\n            cu.value = v;\n            gl.uniform1ui(ud[name].location, v);\n        }\n    },\n    'vec2<u32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2ui(ud[name].location, v[0], v[1]);\n        }\n    },\n    'vec3<u32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3ui(ud[name].location, v[0], v[1], v[2]);\n        }\n    },\n    'vec4<u32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4ui(ud[name].location, v[0], v[1], v[2], v[3]);\n        }\n    },\n    bool(name: string, cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv !== v)\n        {\n            cu.value = v;\n            gl.uniform1i(ud[name].location, v);\n        }\n    },\n    'vec2<bool>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(ud[name].location, v[0], v[1]);\n        }\n    },\n    'vec3<bool>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(ud[name].location, v[0], v[1], v[2]);\n        }\n    },\n    'vec4<bool>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(ud[name].location, v[0], v[1], v[2], v[3]);\n        }\n    },\n    'mat2x2<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix2fv(ud[name].location, false, v);\n    },\n    'mat3x3<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix3fv(ud[name].location, false, v);\n    },\n    'mat4x4<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix4fv(ud[name].location, false, v);\n    },\n};\n\nexport const uniformArrayParserFunctions: Record<UNIFORM_TYPES | string, UniformUploadFunction> = {\n    f32(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform1fv(ud[name].location, v);\n    },\n    'vec2<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform2fv(ud[name].location, v);\n    },\n    'vec3<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform3fv(ud[name].location, v);\n    },\n    'vec4<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform4fv(ud[name].location, v);\n    },\n    'mat2x2<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix2fv(ud[name].location, false, v);\n    },\n    'mat3x3<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix3fv(ud[name].location, false, v);\n    },\n    'mat4x4<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix4fv(ud[name].location, false, v);\n    },\n    i32(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform1iv(ud[name].location, v);\n    },\n    'vec2<i32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform2iv(ud[name].location, v);\n    },\n    'vec3<i32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform3iv(ud[name].location, v);\n    },\n    'vec4<i32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform4iv(ud[name].location, v);\n    },\n    u32(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform1iv(ud[name].location, v);\n    },\n    'vec2<u32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform2iv(ud[name].location, v);\n    },\n    'vec3<u32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform3iv(ud[name].location, v);\n    },\n    'vec4<u32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform4iv(ud[name].location, v);\n    },\n    bool(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform1iv(ud[name].location, v);\n    },\n    'vec2<bool>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform2iv(ud[name].location, v);\n    },\n    'vec3<bool>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform3iv(ud[name].location, v);\n    },\n    'vec4<bool>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform4iv(ud[name].location, v);\n    },\n};\n\nexport const uniformParserFunctions: UniformUploadFunction[] = [\n    (name: string, _cu: any, _cv: any, _v: any, ud: any, uv: any, gl: any): void =>\n    {\n        gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n    },\n    (name: string, _cu: any, cv: any, v: any, ud: any, uv: any, gl: any): void =>\n    {\n        cv = ud[name].value;\n        v = uv[name];\n        if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\n        {\n            cv[0] = v.x;\n            cv[1] = v.y;\n            cv[2] = v.width;\n            cv[3] = v.height;\n            gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n        }\n    },\n    (name: string, _cu: any, cv: any, v: any, ud: any, uv: any, gl: any): void =>\n    {\n        cv = ud[name].value;\n        v = uv[name];\n        if (cv[0] !== v.x || cv[1] !== v.y)\n        {\n            cv[0] = v.x;\n            cv[1] = v.y;\n            gl.uniform2f(ud[name].location, v.x, v.y);\n        }\n    },\n    (name: string, _cu: any, cv: any, v: any, ud: any, uv: any, gl: any): void =>\n    {\n        cv = ud[name].value;\n        v = uv[name];\n        if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha)\n        {\n            cv[0] = v.red;\n            cv[1] = v.green;\n            cv[2] = v.blue;\n            cv[3] = v.alpha;\n            gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n        }\n    },\n    (name: string, _cu: any, cv: any, v: any, ud: any, uv: any, gl: any): void =>\n    {\n        cv = ud[name].value;\n        v = uv[name];\n        if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue)\n        {\n            cv[0] = v.red;\n            cv[1] = v.green;\n            cv[2] = v.blue;\n            gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n        }\n    },\n];\n","import { uniformParsers } from '../../rendering/renderers/shared/shader/utils/uniformParsers';\nimport { uniformArrayParserFunctions, uniformParserFunctions, uniformSingleParserFunctions } from './uniformSyncFunctions';\n\nimport type { GlUniformData } from '../../rendering/renderers/gl/shader/GlProgram';\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { UniformsSyncCallback } from '../../rendering/renderers/shared/shader/types';\nimport type { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport type { UniformUploadFunction } from './uniformSyncFunctions';\n\nexport function generateUniformsSyncPolyfill(\n    group: UniformGroup,\n    uniformData: Record<string, GlUniformData>\n): UniformsSyncCallback\n{\n    // loop through all the uniforms..\n    const functionMap: Record<string, UniformUploadFunction> = {};\n\n    for (const i in group.uniformStructures)\n    {\n        if (!uniformData[i]) continue;\n\n        const uniform = group.uniformStructures[i];\n\n        let parsed = false;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const parser = uniformParsers[j];\n\n            if (uniform.type === parser.type && parser.test(uniform))\n            {\n                functionMap[i] = uniformParserFunctions[j];\n\n                parsed = true;\n\n                break;\n            }\n        }\n\n        // if not parsed...\n\n        if (!parsed)\n        {\n            const templateType = uniform.size === 1 ? uniformSingleParserFunctions : uniformArrayParserFunctions;\n\n            functionMap[i] = templateType[uniform.type];\n        }\n    }\n\n    return (\n        ud: Record<string, any>,\n        uv: Record<string, any>,\n        renderer: WebGLRenderer) =>\n    {\n        const gl = renderer.gl;\n\n        for (const i in functionMap)\n        {\n            const v = uv[i];\n            const cu = ud[i];\n            const cv = ud[i].value;\n\n            functionMap[i](i, cu, cv, v, ud, uv, gl);\n        }\n    };\n}\n","import { GlUboSystem } from '../rendering/renderers/gl/GlUboSystem';\nimport { GlShaderSystem } from '../rendering/renderers/gl/shader/GlShaderSystem';\nimport { GlUniformGroupSystem } from '../rendering/renderers/gl/shader/GlUniformGroupSystem';\nimport { GpuUboSystem } from '../rendering/renderers/gpu/GpuUboSystem';\nimport { UboSystem } from '../rendering/renderers/shared/shader/UboSystem';\nimport { AbstractRenderer } from '../rendering/renderers/shared/system/AbstractRenderer';\nimport { ParticleBuffer } from '../scene/particle-container/shared/ParticleBuffer';\nimport { generateParticleUpdatePolyfill } from './particle/generateParticleUpdatePolyfill';\nimport { generateShaderSyncPolyfill } from './shader/generateShaderSyncPolyfill';\nimport {\n    generateUboSyncPolyfillSTD40,\n    generateUboSyncPolyfillWGSL\n} from './ubo/generateUboSyncPolyfill';\nimport { generateUniformsSyncPolyfill } from './uniforms/generateUniformsSyncPolyfill';\n\nfunction selfInstall()\n{\n    Object.assign(AbstractRenderer.prototype, {\n        // override unsafeEval check, as we don't need to use it\n        _unsafeEvalCheck()\n        {\n            // Do nothing, don't throw error\n        },\n    });\n\n    Object.assign(UboSystem.prototype, {\n        // override unsafeEval check, as we don't need to use it\n        _systemCheck()\n        {\n            // Do nothing, don't throw error\n        },\n    });\n\n    Object.assign(GlUniformGroupSystem.prototype, {\n        // use polyfill which avoids eval method\n        _generateUniformsSync: generateUniformsSyncPolyfill,\n    });\n\n    Object.assign(GlUboSystem.prototype, {\n        // use polyfill which avoids eval method\n        _generateUboSync: generateUboSyncPolyfillSTD40,\n    });\n\n    Object.assign(GpuUboSystem.prototype, {\n        // use polyfill which avoids eval method\n        _generateUboSync: generateUboSyncPolyfillWGSL,\n    });\n\n    Object.assign(GlShaderSystem.prototype, {\n        // use polyfill which avoids eval method\n        _generateShaderSync: generateShaderSyncPolyfill,\n    });\n\n    Object.assign(ParticleBuffer.prototype, {\n\n        // use polyfill which avoids eval method\n        generateParticleUpdate: generateParticleUpdatePolyfill,\n    });\n}\n\nselfInstall();\n"],"names":["generateUpdateFunction"],"mappings":"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"}