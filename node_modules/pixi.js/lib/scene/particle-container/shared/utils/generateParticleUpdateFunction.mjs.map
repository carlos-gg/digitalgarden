{"version":3,"file":"generateParticleUpdateFunction.mjs","sources":["../../../../../src/scene/particle-container/shared/utils/generateParticleUpdateFunction.ts"],"sourcesContent":["import {\n    getAttributeInfoFromFormat\n} from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { IParticle } from '../Particle';\nimport type { ParticleRendererProperty } from '../particleData';\n\n// TODO rename to update function\nexport type ParticleUpdateFunction = (ps: IParticle[], f32v: Float32Array, u32v: Uint32Array) => void;\n\nexport function generateParticleUpdateFunction(properties: Record<string, ParticleRendererProperty>)\n{\n    return {\n        dynamicUpdate: generateUpdateFunction(properties, true),\n        staticUpdate: generateUpdateFunction(properties, false),\n    };\n}\n\nfunction generateUpdateFunction(\n    properties: Record<string, ParticleRendererProperty>,\n    dynamic: boolean\n): ParticleUpdateFunction\n{\n    const funcFragments: string[] = [];\n\n    funcFragments.push(`\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n\n    let offset = 0;\n\n    for (const i in properties)\n    {\n        const property = properties[i];\n\n        if (dynamic !== property.dynamic) continue;\n\n        funcFragments.push(`offset = index + ${offset}`);\n\n        funcFragments.push(property.code);\n\n        const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n        offset += attributeInfo.stride / 4;\n    }\n\n    funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n\n    // add to the front..\n    funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n\n    const functionSource = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('ps', 'f32v', 'u32v', functionSource) as ParticleUpdateFunction;\n}\n"],"names":[],"mappings":";;;AAUO,SAAS,+BAA+B,UAC/C,EAAA;AACI,EAAO,OAAA;AAAA,IACH,aAAA,EAAe,sBAAuB,CAAA,UAAA,EAAY,IAAI,CAAA;AAAA,IACtD,YAAA,EAAc,sBAAuB,CAAA,UAAA,EAAY,KAAK,CAAA;AAAA,GAC1D,CAAA;AACJ,CAAA;AAEA,SAAS,sBAAA,CACL,YACA,OAEJ,EAAA;AACI,EAAA,MAAM,gBAA0B,EAAC,CAAA;AAEjC,EAAA,aAAA,CAAc,IAAK,CAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAQV,CAAA,CAAA,CAAA;AAET,EAAA,IAAI,MAAS,GAAA,CAAA,CAAA;AAEb,EAAA,KAAA,MAAW,KAAK,UAChB,EAAA;AACI,IAAM,MAAA,QAAA,GAAW,WAAW,CAAC,CAAA,CAAA;AAE7B,IAAA,IAAI,YAAY,QAAS,CAAA,OAAA;AAAS,MAAA,SAAA;AAElC,IAAc,aAAA,CAAA,IAAA,CAAK,CAAoB,iBAAA,EAAA,MAAM,CAAE,CAAA,CAAA,CAAA;AAE/C,IAAc,aAAA,CAAA,IAAA,CAAK,SAAS,IAAI,CAAA,CAAA;AAEhC,IAAM,MAAA,aAAA,GAAgB,0BAA2B,CAAA,QAAA,CAAS,MAAM,CAAA,CAAA;AAEhE,IAAA,MAAA,IAAU,cAAc,MAAS,GAAA,CAAA,CAAA;AAAA,GACrC;AAEA,EAAA,aAAA,CAAc,IAAK,CAAA,CAAA;AAAA;AAAA;AAAA,IAGlB,CAAA,CAAA,CAAA;AAGD,EAAA,aAAA,CAAc,OAAQ,CAAA,CAAA;AAAA,qBAAA,EACH,MAAM,CAAA;AAAA,IACxB,CAAA,CAAA,CAAA;AAED,EAAM,MAAA,cAAA,GAAiB,aAAc,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAG9C,EAAA,OAAO,IAAI,QAAA,CAAS,IAAM,EAAA,MAAA,EAAQ,QAAQ,cAAc,CAAA,CAAA;AAC5D;;;;"}