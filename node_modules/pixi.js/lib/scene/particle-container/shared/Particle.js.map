{"version":3,"file":"Particle.js","sources":["../../../../src/scene/particle-container/shared/Particle.ts"],"sourcesContent":["import { Color } from '../../../color/Color';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { assignWithIgnore } from '../../container/utils/assignWithIgnore';\n\nimport type { ColorSource } from '../../../color/Color';\n\n/**\n * Represents a particle with properties for position, scale, rotation, color, and texture.\n * @property {number} x - The x-coordinate of the particle.\n * @property {number} y - The y-coordinate of the particle.\n * @property {number} scaleX - The scale factor in the x-axis.\n * @property {number} scaleY - The scale factor in the y-axis.\n * @property {number} anchorX - The x-coordinate of the anchor point.\n * @property {number} anchorY - The y-coordinate of the anchor point.\n * @property {number} rotation - The rotation of the particle in radians.\n * @property {number} color - The color of the particle as a hexadecimal number.\n * @property {Texture} texture - The texture of the particle.\n * @memberof scene\n */\nexport interface IParticle\n{\n    x: number;\n    y: number;\n    scaleX: number;\n    scaleY: number;\n    anchorX: number;\n    anchorY: number;\n    rotation: number;\n    color: number;\n    texture: Texture;\n}\n\n/**\n * Represents the options for creating a new particle.\n * @property {number} x - The x-coordinate of the particle.\n * @property {number} y - The y-coordinate of the particle.\n * @property {number} scaleX - The scale factor in the x-axis.\n * @property {number} scaleY - The scale factor in the y-axis.\n * @property {number} anchorX - The x-coordinate of the anchor point.\n * @property {number} anchorY - The y-coordinate of the anchor point.\n * @property {number} rotation - The rotation of the particle in radians.\n * @property {Texture} texture - The texture of the particle.\n * @property {ColorSource} tint - The tint color of the particle as a hexadecimal number.\n * @property {number} alpha - The alpha value of the particle.\n * @memberof scene\n */\nexport type ParticleOptions = Omit<Partial<IParticle>, 'color'> & {\n    texture: Texture\n    tint?: ColorSource;\n    alpha?: number;\n};\n\n/**\n * Represents a single particle within a particle container. This class implements the IParticle interface,\n * providing properties and methods to manage the particle's position, scale, rotation, color, and texture.\n *\n * The reason we use a particle over a sprite is that these are much lighter weight and we can create a lot of them\n * without taking on the overhead of a full sprite.\n *\n * Here is an example of how to create a new particle:\n *\n * ```javascript\n * const particle = new Particle({\n *   texture,\n *   x: 100,\n *   y: 100,\n *   scaleX: 0.5,\n *   scaleY: 0.5,\n *   rotation: Math.PI / 2,\n *   color: 0xff0000,\n * });\n * ```\n * @implements {IParticle}\n * @memberof scene\n */\nexport class Particle implements IParticle\n{\n    /** Default options for constructing with options */\n    public static defaultOptions: Partial<ParticleOptions> = {\n        anchorX: 0,\n        anchorY: 0,\n        x: 0,\n        y: 0,\n        scaleX: 1,\n        scaleY: 1,\n        rotation: 0,\n        tint: 0xffffff,\n        alpha: 1,\n    };\n    /** The x-coordinate of the anchor point. */\n    public anchorX: number;\n    /** The y-coordinate of the anchor point. */\n    public anchorY: number;\n    /** The x-coordinate of the particle. */\n    public x: number;\n    /** The y-coordinate of the particle. */\n    public y: number;\n    /** The scale factor in the x-axis. */\n    public scaleX: number;\n    /** The scale factor in the y-axis. */\n    public scaleY: number;\n    /** The rotation of the particle in radians. */\n    public rotation: number;\n    /** The color of the particle as a hexadecimal number. */\n    public color: number;\n    /** The texture of the particle. */\n    public texture: Texture;\n\n    private _alpha: number;\n    private _tint: number;\n\n    constructor(options: Texture | ParticleOptions)\n    {\n        if (options instanceof Texture)\n        {\n            this.texture = options;\n            assignWithIgnore(this, Particle.defaultOptions, {});\n        }\n        else\n        {\n            const combined = { ...Particle.defaultOptions, ...options };\n\n            assignWithIgnore(this, combined, {});\n        }\n    }\n\n    /** Gets or sets the alpha value of the particle. */\n    get alpha(): number\n    {\n        return this._alpha;\n    }\n\n    set alpha(value: number)\n    {\n        this._alpha = Math.min(Math.max(value, 0), 1);\n\n        this._updateColor();\n    }\n\n    /** Gets or sets the tint color of the particle. */\n    get tint(): number\n    {\n        const bgr = this._tint;\n\n        return ((bgr & 0xFF) << 16) + (bgr & 0xFF00) + ((bgr >> 16) & 0xFF);\n    }\n\n    set tint(value: ColorSource)\n    {\n        if (typeof value === 'number')\n        {\n            this._tint = value;\n        }\n        else\n        {\n            this._tint = Color.shared.setValue(value ?? 0xFFFFFF).toBgrNumber();\n        }\n\n        this._updateColor();\n    }\n\n    private _updateColor()\n    {\n        // combine alpha and tint\n        this.color = this._tint + (((this._alpha * 255) | 0) << 24);\n    }\n}\n"],"names":["Texture","assignWithIgnore","Color"],"mappings":";;;;;;;AA2EO,MAAM,SAAA,GAAN,MAAM,SACb,CAAA;AAAA,EAmCI,YAAY,OACZ,EAAA;AACI,IAAA,IAAI,mBAAmBA,eACvB,EAAA;AACI,MAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;AACf,MAAAC,iCAAA,CAAiB,IAAM,EAAA,SAAA,CAAS,cAAgB,EAAA,EAAE,CAAA,CAAA;AAAA,KAGtD,MAAA;AACI,MAAA,MAAM,WAAW,EAAE,GAAG,SAAS,CAAA,cAAA,EAAgB,GAAG,OAAQ,EAAA,CAAA;AAE1D,MAAiBA,iCAAA,CAAA,IAAA,EAAM,QAAU,EAAA,EAAE,CAAA,CAAA;AAAA,KACvC;AAAA,GACJ;AAAA;AAAA,EAGA,IAAI,KACJ,GAAA;AACI,IAAA,OAAO,IAAK,CAAA,MAAA,CAAA;AAAA,GAChB;AAAA,EAEA,IAAI,MAAM,KACV,EAAA;AACI,IAAK,IAAA,CAAA,MAAA,GAAS,KAAK,GAAI,CAAA,IAAA,CAAK,IAAI,KAAO,EAAA,CAAC,GAAG,CAAC,CAAA,CAAA;AAE5C,IAAA,IAAA,CAAK,YAAa,EAAA,CAAA;AAAA,GACtB;AAAA;AAAA,EAGA,IAAI,IACJ,GAAA;AACI,IAAA,MAAM,MAAM,IAAK,CAAA,KAAA,CAAA;AAEjB,IAAA,OAAA,CAAA,CAAS,MAAM,GAAS,KAAA,EAAA,KAAO,GAAM,GAAA,KAAA,CAAA,IAAY,OAAO,EAAM,GAAA,GAAA,CAAA,CAAA;AAAA,GAClE;AAAA,EAEA,IAAI,KAAK,KACT,EAAA;AACI,IAAI,IAAA,OAAO,UAAU,QACrB,EAAA;AACI,MAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AAAA,KAGjB,MAAA;AACI,MAAA,IAAA,CAAK,QAAQC,WAAM,CAAA,MAAA,CAAO,SAAS,KAAS,IAAA,QAAQ,EAAE,WAAY,EAAA,CAAA;AAAA,KACtE;AAEA,IAAA,IAAA,CAAK,YAAa,EAAA,CAAA;AAAA,GACtB;AAAA,EAEQ,YACR,GAAA;AAEI,IAAA,IAAA,CAAK,QAAQ,IAAK,CAAA,KAAA,IAAA,CAAW,IAAK,CAAA,MAAA,GAAS,MAAO,CAAM,KAAA,EAAA,CAAA,CAAA;AAAA,GAC5D;AACJ,CAAA,CAAA;AAAA;AA3Fa,SAAA,CAGK,cAA2C,GAAA;AAAA,EACrD,OAAS,EAAA,CAAA;AAAA,EACT,OAAS,EAAA,CAAA;AAAA,EACT,CAAG,EAAA,CAAA;AAAA,EACH,CAAG,EAAA,CAAA;AAAA,EACH,MAAQ,EAAA,CAAA;AAAA,EACR,MAAQ,EAAA,CAAA;AAAA,EACR,QAAU,EAAA,CAAA;AAAA,EACV,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,CAAA;AACX,CAAA,CAAA;AAbG,IAAM,QAAN,GAAA;;;;"}