{"version":3,"file":"ParticleContainer.mjs","sources":["../../../../src/scene/particle-container/shared/ParticleContainer.ts"],"sourcesContent":["import { ViewContainer } from '../../view/ViewContainer';\nimport { particleData } from './particleData';\n\nimport type { Instruction } from '../../../rendering/renderers/shared/instructions/Instruction';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Bounds, BoundsData } from '../../container/bounds/Bounds';\nimport type { ContainerChild, ContainerOptions } from '../../container/Container';\nimport type { DestroyOptions } from '../../container/destroyTypes';\nimport type { IParticle } from './Particle';\nimport type { ParticleRendererProperty } from './particleData';\n\nconst emptyBounds: BoundsData = {\n    minX: 0,\n    minY: 0,\n    maxX: 0,\n    maxY: 0,\n};\n\n/**\n * Represents the properties of a particle that can be dynamically updated.\n * @property {boolean} [vertices] - Indicates if vertices are dynamic.\n * @property {boolean} [position] - Indicates if position is dynamic.\n * @property {boolean} [rotation] - Indicates if rotation is dynamic.\n * @property {boolean} [uvs] - Indicates if UVs are dynamic.\n * @property {boolean} [color] - Indicates if color is dynamic.\n * @memberof scene\n */\nexport interface ParticleProperties\n{\n    vertex?: boolean;\n    position?: boolean;\n    rotation?: boolean;\n    uvs?: boolean;\n    color?: boolean;\n}\n\n/**\n * Options for the ParticleContainer constructor.\n * @extends ContainerOptions\n * @property {Record<string, boolean>} dynamicProperties - Specifies which properties are dynamic.\n * @property {Shader} shader - The shader to use for rendering.\n * @property {boolean} roundPixels - Indicates if pixels should be rounded.\n * @property {Texture} texture - The texture to use for rendering - if not provided the texture of the first child is used.\n * @property {IParticle[]} particles - An array of particles to add to the container.\n * @memberof scene\n */\nexport interface ParticleContainerOptions extends Omit<ContainerOptions, 'children'>\n{\n    dynamicProperties?: Record<string, boolean>;\n    shader?: Shader;\n    roundPixels?: boolean;\n    texture?: Texture;\n    particles?: IParticle[];\n}\n\n/**\n * The ParticleContainer class is a highly optimized container that can render 1000s or particles at great speed.\n *\n * A ParticleContainer is specialized in that it can only contain and render particles. Particles are\n * lightweight objects that use minimal memory, which helps boost performance.\n *\n * It can render particles EXTREMELY fast!\n *\n * The tradeoff of using a ParticleContainer is that most advanced functionality is unavailable. Particles are simple\n * and cannot have children, filters, masks, etc. They possess only the basic properties: position, scale, rotation,\n * and color.\n *\n * All particles must share the same texture source (using something like a sprite sheet works well here).\n *\n * When creating a ParticleContainer, a developer can specify which of these properties are static and which are dynamic.\n * - Static properties are only updated when you add or remove a child, or when the `update` function is called.\n * - Dynamic properties are updated every frame.\n *\n * It is up to the developer to specify which properties are static and which are dynamic. Generally, the more static\n * properties you have (i.e., those that do not change per frame), the faster the rendering.\n *\n * If the developer modifies the children order or any static properties of the particle, they must call the `update` method.\n *\n * By default, only the `position` property is set to dynamic, which makes rendering very fast!\n *\n * Developers can also provide a custom shader to the particle container, allowing them to render particles in a custom way.\n *\n * To help with performance, the particle containers bounds are not calculated.\n * It's up to the developer to set the boundsArea property.\n *\n * It's extremely easy to use. Below is an example of rendering thousands of sprites at lightning speed.\n *\n * --------- EXPERIMENTAL ---------\n *\n * This is a new API, things may change and it may not work as expected.\n * We want to hear your feedback as we go!\n *\n * --------------------------------\n * @example\n * import { ParticleContainer, Particle } from 'pixi.js';\n *\n * const container = new ParticleContainer();\n *\n * for (let i = 0; i < 100; ++i)\n * {\n *     let particle = new Particle(texture);\n *     container.addParticle(particle);\n * }\n * @memberof scene\n */\nexport class ParticleContainer extends ViewContainer implements Instruction\n{\n    /**\n     * Defines the default options for creating a ParticleContainer.\n     * @property {Record<string, boolean>} dynamicProperties - Specifies which properties are dynamic.\n     * @property {boolean} roundPixels - Indicates if pixels should be  rounded.\n     */\n    public static defaultOptions: ParticleContainerOptions = {\n        dynamicProperties: {\n            vertex: false, // Indicates if vertex positions are dynamic.\n            position: true, // Indicates if particle positions are dynamic.\n            rotation: false, // Indicates if particle rotations are dynamic.\n            uvs: false, // Indicates if UV coordinates are dynamic.\n            color: false, // Indicates if particle colors are dynamic.\n        },\n        roundPixels: false, // Indicates if pixels should be rounded for rendering.\n    };\n\n    /** The unique identifier for the render pipe of this ParticleContainer. */\n    public override readonly renderPipeId: string = 'particle';\n\n    public batched = false;\n\n    /**\n     * A record of properties and their corresponding ParticleRendererProperty.\n     * @internal\n     */\n    public _properties: Record<string, ParticleRendererProperty>;\n\n    /** Indicates if the children of this ParticleContainer have changed and need to be updated. */\n    public _childrenDirty = false;\n\n    /**\n     * An array of particles that are children of this ParticleContainer.\n     * it can be modified directly, after which the 'update' method must be called.\n     * to ensure the container is rendered correctly.\n     */\n    public particleChildren: IParticle[];\n\n    /** The shader used for rendering particles in this ParticleContainer. */\n    public shader: Shader;\n\n    /**\n     * The texture used for rendering particles in this ParticleContainer.\n     * Defaults to the first childs texture if not set\n     */\n    public texture: Texture;\n\n    /**\n     * @param options - The options for creating the sprite.\n     */\n    constructor(options: ParticleContainerOptions = {})\n    {\n        options = {\n            ...ParticleContainer.defaultOptions,\n            ...options,\n            dynamicProperties: {\n                ...ParticleContainer.defaultOptions.dynamicProperties,\n                ...options?.dynamicProperties,\n            },\n        };\n\n        // split out\n        const { dynamicProperties, shader, roundPixels, texture, particles, ...rest } = options;\n\n        super({\n            label: 'ParticleContainer',\n            ...rest,\n        });\n\n        this.texture = texture || null;\n        this.shader = shader;\n\n        this._properties = {};\n\n        for (const key in particleData)\n        {\n            const property = particleData[key];\n            const dynamic = dynamicProperties[key];\n\n            this._properties[key] = {\n                ...property,\n                dynamic,\n            };\n        }\n\n        this.allowChildren = true;\n        this.roundPixels = roundPixels ?? false;\n\n        this.particleChildren = particles ?? [];\n    }\n\n    /**\n     * Adds one or more particles to the container.\n     *\n     * Multiple items can be added like so: `myContainer.addParticle(thingOne, thingTwo, thingThree)`\n     * @param {...IParticle} children - The Particle(s) to add to the container\n     * @returns {IParticle} - The first child that was added.\n     */\n    public addParticle(...children: IParticle[]): IParticle\n    {\n        for (let i = 0; i < children.length; i++)\n        {\n            this.particleChildren.push(children[i]);\n        }\n\n        this.onViewUpdate();\n\n        return children[0];\n    }\n\n    /**\n     * Removes one or more particles from the container.\n     * @param {...IParticle} children - The Particle(s) to remove\n     * @returns {IParticle} The first child that was removed.\n     */\n    public removeParticle(...children: IParticle[]): IParticle\n    {\n        let didRemove = false;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const index = this.particleChildren.indexOf(children[i] as IParticle);\n\n            if (index > -1)\n            {\n                this.particleChildren.splice(index, 1);\n                didRemove = true;\n            }\n        }\n\n        if (didRemove) this.onViewUpdate();\n\n        return children[0];\n    }\n\n    /**\n     * Updates the particle container.\n     * Please call this when you modify the particleChildren array.\n     * or any static properties of the particles.\n     */\n    public update()\n    {\n        this._childrenDirty = true;\n    }\n\n    protected override onViewUpdate()\n    {\n        this._childrenDirty = true;\n        super.onViewUpdate();\n    }\n\n    /**\n     * ParticleContainer does not calculated bounds as it would slow things down,\n     * its up to you to set this via the boundsArea property\n     */\n    public get bounds(): BoundsData\n    {\n        return emptyBounds;\n    }\n\n    /**\n     * ParticleContainer does not calculated bounds as it would slow things down,\n     * its up to you to set this via the boundsArea property\n     * @param _bounds - The output bounds object.\n     */\n    public addBounds(_bounds: Bounds): void\n    {\n        // empty\n    }\n\n    /**\n     * Destroys this sprite renderable and optionally its texture.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n     */\n    public override destroy(options: DestroyOptions = false)\n    {\n        super.destroy(options);\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            const texture = this.texture ?? this.particleChildren[0]?.texture;\n\n            if (texture)\n            {\n                texture.destroy(destroyTextureSource);\n            }\n        }\n\n        this.texture = null;\n        this.shader?.destroy();\n    }\n\n    /**\n     * Removes all particles from this container that are within the begin and end indexes.\n     * @param beginIndex - The beginning position.\n     * @param endIndex - The ending position. Default value is size of the container.\n     * @returns - List of removed particles\n     */\n    public removeParticles(beginIndex?: number, endIndex?: number)\n    {\n        const children = this.particleChildren.splice(beginIndex, endIndex);\n\n        this.onViewUpdate();\n\n        return children;\n    }\n\n    /**\n     * Removes a particle from the specified index position.\n     * @param index - The index to get the particle from\n     * @returns The particle that was removed.\n     */\n    public removeParticleAt<U extends IParticle>(index: number): U\n    {\n        const child = this.particleChildren.splice(index, 1);\n\n        this.onViewUpdate();\n\n        return child[0] as U;\n    }\n\n    /**\n     * Adds a particle to the container at a specified index. If the index is out of bounds an error will be thrown.\n     * If the particle is already in this container, it will be moved to the specified index.\n     * @param {Container} child - The particle to add.\n     * @param {number} index - The absolute index where the particle will be positioned at the end of the operation.\n     * @returns {Container} The particle that was added.\n     */\n    public addParticleAt<U extends IParticle>(child: U, index: number): U\n    {\n        this.particleChildren.splice(index, 0, child);\n\n        this.onViewUpdate();\n\n        return child;\n    }\n\n    /**\n     * This method is not available in ParticleContainer.\n     *\n     * Calling this method will throw an error. Please use `ParticleContainer.addParticle()` instead.\n     * @param {...any} _children\n     * @throws {Error} Always throws an error as this method is not available.\n     */\n    public override addChild<U extends ContainerChild[]>(..._children: U): U[0]\n    {\n        throw new Error(\n            'ParticleContainer.addChild() is not available. Please use ParticleContainer.addParticle()',\n        );\n    }\n    /**\n     * This method is not available in ParticleContainer.\n     * Calling this method will throw an error. Please use `ParticleContainer.removeParticle()` instead.\n     * @param {...any} _children\n     * @throws {Error} Always throws an error as this method is not available.\n     */\n    public override removeChild<U extends ContainerChild[]>(..._children: U): U[0]\n    {\n        throw new Error(\n            'ParticleContainer.removeChild() is not available. Please use ParticleContainer.removeParticle()',\n        );\n    }\n    /**\n     * This method is not available in ParticleContainer.\n     *\n     * Calling this method will throw an error. Please use `ParticleContainer.removeParticles()` instead.\n     * @param {number} [_beginIndex]\n     * @param {number} [_endIndex]\n     * @throws {Error} Always throws an error as this method is not available.\n     */\n    public override removeChildren(_beginIndex?: number, _endIndex?: number): ContainerChild[]\n    {\n        throw new Error(\n            'ParticleContainer.removeChildren() is not available. Please use ParticleContainer.removeParticles()',\n        );\n    }\n    /**\n     * This method is not available in ParticleContainer.\n     *\n     * Calling this method will throw an error. Please use `ParticleContainer.removeParticleAt()` instead.\n     * @param {number} _index\n     * @throws {Error} Always throws an error as this method is not available.\n     */\n    public override removeChildAt<U extends ContainerChild>(_index: number): U\n    {\n        throw new Error(\n            'ParticleContainer.removeChildAt() is not available. Please use ParticleContainer.removeParticleAt()',\n        );\n    }\n    /**\n     * This method is not available in ParticleContainer.\n     *\n     * Calling this method will throw an error. Please use `ParticleContainer.getParticleAt()` instead.\n     * @param {number} _index\n     * @throws {Error} Always throws an error as this method is not available.\n     */\n    public override getChildAt<U extends ContainerChild>(_index: number): U\n    {\n        throw new Error(\n            'ParticleContainer.getChildAt() is not available. Please use ParticleContainer.getParticleAt()',\n        );\n    }\n    /**\n     * This method is not available in ParticleContainer.\n     *\n     * Calling this method will throw an error. Please use `ParticleContainer.setParticleIndex()` instead.\n     * @param {ContainerChild} _child\n     * @param {number} _index\n     * @throws {Error} Always throws an error as this method is not available.\n     */\n    public override setChildIndex(_child: ContainerChild, _index: number): void\n    {\n        throw new Error(\n            'ParticleContainer.setChildIndex() is not available. Please use ParticleContainer.setParticleIndex()',\n        );\n    }\n    /**\n     * This method is not available in ParticleContainer.\n     *\n     * Calling this method will throw an error. Please use `ParticleContainer.getParticleIndex()` instead.\n     * @param {ContainerChild} _child\n     * @throws {Error} Always throws an error as this method is not available.\n     */\n    public override getChildIndex(_child: ContainerChild): number\n    {\n        throw new Error(\n            'ParticleContainer.getChildIndex() is not available. Please use ParticleContainer.getParticleIndex()',\n        );\n    }\n    /**\n     * This method is not available in ParticleContainer.\n     *\n     * Calling this method will throw an error. Please use `ParticleContainer.addParticleAt()` instead.\n     * @param {ContainerChild} _child\n     * @param {number} _index\n     * @throws {Error} Always throws an error as this method is not available.\n     */\n    public override addChildAt<U extends ContainerChild>(_child: U, _index: number): U\n    {\n        throw new Error(\n            'ParticleContainer.addChildAt() is not available. Please use ParticleContainer.addParticleAt()',\n        );\n    }\n    /**\n     * This method is not available in ParticleContainer.\n     *\n     * Calling this method will throw an error. Please use `ParticleContainer.swapParticles()` instead.\n     * @param {ContainerChild} _child\n     * @param {ContainerChild} _child2\n     */\n    public override swapChildren<U extends ContainerChild>(_child: U, _child2: U): void\n    {\n        throw new Error(\n            'ParticleContainer.swapChildren() is not available. Please use ParticleContainer.swapParticles()',\n        );\n    }\n\n    /**\n     * This method is not available in ParticleContainer.\n     *\n     * Calling this method will throw an error.\n     * @param _child - The child to reparent\n     * @throws {Error} Always throws an error as this method is not available.\n     */\n    public override reparentChild(..._child: ContainerChild[]): any\n    {\n        throw new Error('ParticleContainer.reparentChild() is not available with the particle container');\n    }\n\n    /**\n     * This method is not available in ParticleContainer.\n     *\n     * Calling this method will throw an error.\n     * @param _child - The child to reparent\n     * @param _index - The index to reparent the child to\n     * @throws {Error} Always throws an error as this method is not available.\n     */\n    public override reparentChildAt(_child: ContainerChild, _index: number): any\n    {\n        throw new Error('ParticleContainer.reparentChildAt() is not available with the particle container');\n    }\n}\n"],"names":[],"mappings":"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"}