{"version":3,"file":"BatchableMesh.js","sources":["../../../../src/scene/mesh/shared/BatchableMesh.ts"],"sourcesContent":["import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableMeshElement } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { ViewContainer } from '../../view/ViewContainer';\nimport type { MeshGeometry } from './MeshGeometry';\n\n/**\n * A batchable mesh object.\n * @ignore\n */\nexport class BatchableMesh implements DefaultBatchableMeshElement\n{\n    public batcherName = 'default';\n    public readonly packAsQuad = false;\n    public location: number;\n\n    public renderable: ViewContainer;\n\n    public indexOffset = 0;\n    public attributeOffset = 0;\n\n    public texture: Texture;\n    public geometry: MeshGeometry;\n    public transform: Matrix;\n    public roundPixels: 0 | 1 = 0;\n\n    public _attributeStart: number;\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n    public _indexStart: number;\n    public _textureId: number;\n\n    private _transformedUvs: Float32Array;\n    private _uvUpdateId: number = -1;\n    private _textureMatrixUpdateId: number = -1;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.geometry = null;\n        this._uvUpdateId = -1;\n        this._textureMatrixUpdateId = -1;\n    }\n\n    get uvs()\n    {\n        const geometry = this.geometry;\n\n        const uvBuffer = geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let transformedUvs = uvs;\n        const textureMatrix = this.texture.textureMatrix;\n\n        if (!textureMatrix.isSimple)\n        {\n            transformedUvs = this._transformedUvs;\n\n            if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID)\n            {\n                if (!transformedUvs || transformedUvs.length < uvs.length)\n                {\n                    transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n                }\n\n                this._textureMatrixUpdateId = textureMatrix._updateID;\n                this._uvUpdateId = uvBuffer._updateID;\n\n                textureMatrix.multiplyUvs(uvs as Float32Array, transformedUvs);\n            }\n        }\n\n        return transformedUvs as Float32Array;\n    }\n\n    get positions()\n    {\n        return this.geometry.positions;\n    }\n\n    get indices()\n    {\n        return this.geometry.indices;\n    }\n\n    get color()\n    {\n        return this.renderable.groupColorAlpha;\n    }\n\n    get groupTransform()\n    {\n        return this.renderable.groupTransform;\n    }\n\n    get attributeSize()\n    {\n        return this.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.geometry.indices.length;\n    }\n}\n"],"names":[],"mappings":"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"}