{"version":3,"file":"workerpool.min.js","sources":["../src/environment.js","../src/Promise.js","../src/validateOptions.js","../src/WorkerHandler.js","../src/generated/embeddedWorker.js","../src/Pool.js","../src/debug-port-allocator.js","../src/transfer.js","../src/worker.js","../src/index.js"],"sourcesContent":["\n// source: https://github.com/flexdinesh/browser-or-node\n// source: https://github.com/mozilla/pdf.js/blob/7ea0e40e588864cd938d1836ec61f1928d3877d3/src/shared/util.js#L24\nvar isNode = function (nodeProcess) {\n  return (\n    typeof nodeProcess !== 'undefined' &&\n    nodeProcess.versions != null &&\n    nodeProcess.versions.node != null &&\n    nodeProcess + '' === '[object process]'\n  );\n}\nmodule.exports.isNode = isNode\n\n// determines the JavaScript platform: browser or node\nmodule.exports.platform = typeof process !== 'undefined' && isNode(process)\n  ? 'node'\n  : 'browser';\n\n// determines whether the code is running in main thread or not\n// note that in node.js we have to check both worker_thread and child_process\nvar worker_threads = module.exports.platform === 'node' && require('worker_threads');\nmodule.exports.isMainThread = module.exports.platform === 'node'\n  ? ((!worker_threads || worker_threads.isMainThread) && !process.connected)\n  : typeof Window !== 'undefined';\n\n// determines the number of cpus available\nmodule.exports.cpus = module.exports.platform === 'browser'\n  ? self.navigator.hardwareConcurrency\n  : require('os').cpus().length;\n\n","'use strict';\n\n/**\n * Promise\n *\n * Inspired by https://gist.github.com/RubaXa/8501359 from RubaXa <trash@rubaxa.org>\n * @template T\n * @template [E=Error]\n * @param {Function} handler   Called as handler(resolve: Function, reject: Function)\n * @param {Promise} [parent]   Parent promise for propagation of cancel and timeout\n */\nfunction Promise(handler, parent) {\n  var me = this;\n\n  if (!(this instanceof Promise)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  if (typeof handler !== 'function') {\n    throw new SyntaxError('Function parameter handler(resolve, reject) missing');\n  }\n\n  var _onSuccess = [];\n  var _onFail = [];\n\n  // status\n  /**\n   * @readonly\n   */\n  this.resolved = false;\n  /**\n   * @readonly\n   */\n  this.rejected = false;\n  /**\n   * @readonly\n   */\n  this.pending = true;\n\n  /**\n   * Process onSuccess and onFail callbacks: add them to the queue.\n   * Once the promise is resolved, the function _promise is replace.\n   * @param {Function} onSuccess\n   * @param {Function} onFail\n   * @private\n   */\n  var _process = function (onSuccess, onFail) {\n    _onSuccess.push(onSuccess);\n    _onFail.push(onFail);\n  };\n\n  /**\n   * Add an onSuccess callback and optionally an onFail callback to the Promise\n   * @template TT\n   * @template [TE=never]\n   * @param {(r: T) => TT | PromiseLike<TT>} onSuccess\n   * @param {(r: E) => TE | PromiseLike<TE>} [onFail]\n   * @returns {Promise<TT | TE, any>} promise\n   */\n  this.then = function (onSuccess, onFail) {\n    return new Promise(function (resolve, reject) {\n      var s = onSuccess ? _then(onSuccess, resolve, reject) : resolve;\n      var f = onFail    ? _then(onFail,    resolve, reject) : reject;\n\n      _process(s, f);\n    }, me);\n  };\n\n  /**\n   * Resolve the promise\n   * @param {*} result\n   * @type {Function}\n   */\n  var _resolve = function (result) {\n    // update status\n    me.resolved = true;\n    me.rejected = false;\n    me.pending = false;\n\n    _onSuccess.forEach(function (fn) {\n      fn(result);\n    });\n\n    _process = function (onSuccess, onFail) {\n      onSuccess(result);\n    };\n\n    _resolve = _reject = function () { };\n\n    return me;\n  };\n\n  /**\n   * Reject the promise\n   * @param {Error} error\n   * @type {Function}\n   */\n  var _reject = function (error) {\n    // update status\n    me.resolved = false;\n    me.rejected = true;\n    me.pending = false;\n\n    _onFail.forEach(function (fn) {\n      fn(error);\n    });\n\n    _process = function (onSuccess, onFail) {\n      onFail(error);\n    };\n\n    _resolve = _reject = function () { }\n\n    return me;\n  };\n\n  /**\n   * Cancel the promise. This will reject the promise with a CancellationError\n   * @returns {this} self\n   */\n  this.cancel = function () {\n    if (parent) {\n      parent.cancel();\n    }\n    else {\n      _reject(new CancellationError());\n    }\n\n    return me;\n  };\n\n  /**\n   * Set a timeout for the promise. If the promise is not resolved within\n   * the time, the promise will be cancelled and a TimeoutError is thrown.\n   * If the promise is resolved in time, the timeout is removed.\n   * @param {number} delay     Delay in milliseconds\n   * @returns {this} self\n   */\n  this.timeout = function (delay) {\n    if (parent) {\n      parent.timeout(delay);\n    }\n    else {\n      var timer = setTimeout(function () {\n        _reject(new TimeoutError('Promise timed out after ' + delay + ' ms'));\n      }, delay);\n\n      me.always(function () {\n        clearTimeout(timer);\n      });\n    }\n\n    return me;\n  };\n\n  // attach handler passing the resolve and reject functions\n  handler(function (result) {\n    _resolve(result);\n  }, function (error) {\n    _reject(error);\n  });\n}\n\n/**\n * Execute given callback, then call resolve/reject based on the returned result\n * @param {Function} callback\n * @param {Function} resolve\n * @param {Function} reject\n * @returns {Function}\n * @private\n */\nfunction _then(callback, resolve, reject) {\n  return function (result) {\n    try {\n      var res = callback(result);\n      if (res && typeof res.then === 'function' && typeof res['catch'] === 'function') {\n        // method returned a promise\n        res.then(resolve, reject);\n      }\n      else {\n        resolve(res);\n      }\n    }\n    catch (error) {\n      reject(error);\n    }\n  }\n}\n\n/**\n * Add an onFail callback to the Promise\n * @template TT\n * @param {(error: E) => TT | PromiseLike<TT>} onFail\n * @returns {Promise<T | TT>} promise\n */\nPromise.prototype['catch'] = function (onFail) {\n  return this.then(null, onFail);\n};\n\n// TODO: add support for Promise.catch(Error, callback)\n// TODO: add support for Promise.catch(Error, Error, callback)\n\n/**\n * Execute given callback when the promise either resolves or rejects.\n * @template TT\n * @param {() => Promise<TT>} fn\n * @returns {Promise<TT>} promise\n */\nPromise.prototype.always = function (fn) {\n  return this.then(fn, fn);\n};\n\n/**\n  * Execute given callback when the promise either resolves or rejects.\n  * Same semantics as Node's Promise.finally()\n  * @param {Function} fn\n  * @returns {Promise} promise\n  */\nPromise.prototype.finally = function (fn) {\n  const me = this;\n\n  const final = function() {\n    return new Promise((resolve) => resolve())\n      .then(fn)\n      .then(() => me);\n  };\n\n  return this.then(final, final);\n}\n\n/**\n * Create a promise which resolves when all provided promises are resolved,\n * and fails when any of the promises resolves.\n * @param {Promise[]} promises\n * @returns {Promise<any[], any>} promise\n */\nPromise.all = function (promises){\n  return new Promise(function (resolve, reject) {\n    var remaining = promises.length,\n        results = [];\n\n    if (remaining) {\n      promises.forEach(function (p, i) {\n        p.then(function (result) {\n          results[i] = result;\n          remaining--;\n          if (remaining == 0) {\n            resolve(results);\n          }\n        }, function (error) {\n          remaining = 0;\n          reject(error);\n        });\n      });\n    }\n    else {\n      resolve(results);\n    }\n  });\n};\n\n/**\n * Create a promise resolver\n * @returns {{promise: Promise, resolve: Function, reject: Function}} resolver\n */\nPromise.defer = function () {\n  var resolver = {};\n\n  resolver.promise = new Promise(function (resolve, reject) {\n    resolver.resolve = resolve;\n    resolver.reject = reject;\n  });\n\n  return resolver;\n};\n\n/**\n * Create a cancellation error\n * @param {String} [message]\n * @extends Error\n */\nfunction CancellationError(message) {\n  this.message = message || 'promise cancelled';\n  this.stack = (new Error()).stack;\n}\n\nCancellationError.prototype = new Error();\nCancellationError.prototype.constructor = Error;\nCancellationError.prototype.name = 'CancellationError';\n\nPromise.CancellationError = CancellationError;\n\n\n/**\n * Create a timeout error\n * @param {String} [message]\n * @extends Error\n */\nfunction TimeoutError(message) {\n  this.message = message || 'timeout exceeded';\n  this.stack = (new Error()).stack;\n}\n\nTimeoutError.prototype = new Error();\nTimeoutError.prototype.constructor = Error;\nTimeoutError.prototype.name = 'TimeoutError';\n\nPromise.TimeoutError = TimeoutError;\n\n\nexports.Promise = Promise;\n","/**\n * Validate that the object only contains known option names\n * - Throws an error when unknown options are detected\n * - Throws an error when some of the allowed options are attached\n * @param {Object | undefined} options\n * @param {string[]} allowedOptionNames\n * @param {string} objectName\n * @retrun {Object} Returns the original options\n */\nexports.validateOptions = function validateOptions(options, allowedOptionNames, objectName) {\n  if (!options) {\n    return\n  }\n\n  var optionNames = options ?  Object.keys(options) : []\n\n  // check for unknown properties\n  var unknownOptionName = optionNames.find(optionName => !allowedOptionNames.includes(optionName))\n  if (unknownOptionName) {\n    throw new Error('Object \"' + objectName + '\" contains an unknown option \"' + unknownOptionName + '\"')\n  }\n\n  // check for inherited properties which are not present on the object itself\n  var illegalOptionName = allowedOptionNames.find(allowedOptionName => {\n    return Object.prototype[allowedOptionName] && !optionNames.includes(allowedOptionName)\n  })\n  if (illegalOptionName) {\n    throw new Error('Object \"' + objectName + '\" contains an inherited option \"' + illegalOptionName + '\" which is ' +\n      'not defined in the object itself but in its prototype. Only plain objects are allowed. ' +\n      'Please remove the option from the prototype or override it with a value \"undefined\".')\n  }\n\n  return options\n}\n\n// source: https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker\nexports.workerOptsNames = [\n  'credentials', 'name', 'type' ]\n\n// source: https://nodejs.org/api/child_process.html#child_processforkmodulepath-args-options\nexports.forkOptsNames = [\n  'cwd', 'detached', 'env', 'execPath', 'execArgv', 'gid', 'serialization',\n  'signal', 'killSignal', 'silent', 'stdio', 'uid', 'windowsVerbatimArguments',\n  'timeout'\n]\n\n// source: https://nodejs.org/api/worker_threads.html#new-workerfilename-options\nexports.workerThreadOptsNames = [\n  'argv', 'env', 'eval', 'execArgv', 'stdin', 'stdout', 'stderr', 'workerData',\n  'trackUnmanagedFds', 'transferList', 'resourceLimits', 'name'\n]\n","'use strict';\n\nvar {Promise} = require('./Promise');\nvar environment = require('./environment');\nconst {validateOptions, forkOptsNames, workerThreadOptsNames, workerOptsNames} = require(\"./validateOptions\");\n\n/**\n * Special message sent by parent which causes a child process worker to terminate itself.\n * Not a \"message object\"; this string is the entire message.\n */\nvar TERMINATE_METHOD_ID = '__workerpool-terminate__';\n\n/**\n * Special message by parent which causes a child process worker to perform cleaup\n * steps before determining if the child process worker should be terminated.\n */\nvar CLEANUP_METHOD_ID = '__workerpool-cleanup__';\n\nfunction ensureWorkerThreads() {\n  var WorkerThreads = tryRequireWorkerThreads()\n  if (!WorkerThreads) {\n    throw new Error('WorkerPool: workerType = \\'thread\\' is not supported, Node >= 11.7.0 required')\n  }\n\n  return WorkerThreads;\n}\n\n// check whether Worker is supported by the browser\nfunction ensureWebWorker() {\n  // Workaround for a bug in PhantomJS (Or QtWebkit): https://github.com/ariya/phantomjs/issues/14534\n  if (typeof Worker !== 'function' && (typeof Worker !== 'object' || typeof Worker.prototype.constructor !== 'function')) {\n    throw new Error('WorkerPool: Web Workers not supported');\n  }\n}\n\nfunction tryRequireWorkerThreads() {\n  try {\n    return require('worker_threads');\n  } catch(error) {\n    if (typeof error === 'object' && error !== null && error.code === 'MODULE_NOT_FOUND') {\n      // no worker_threads available (old version of node.js)\n      return null;\n    } else {\n      throw error;\n    }\n  }\n}\n\n// get the default worker script\nfunction getDefaultWorker() {\n  if (environment.platform === 'browser') {\n    // test whether the browser supports all features that we need\n    if (typeof Blob === 'undefined') {\n      throw new Error('Blob not supported by the browser');\n    }\n    if (!window.URL || typeof window.URL.createObjectURL !== 'function') {\n      throw new Error('URL.createObjectURL not supported by the browser');\n    }\n\n    // use embedded worker.js\n    var blob = new Blob([require('./generated/embeddedWorker')], {type: 'text/javascript'});\n    return window.URL.createObjectURL(blob);\n  }\n  else {\n    // use external worker.js in current directory\n    return __dirname + '/worker.js';\n  }\n}\n\nfunction setupWorker(script, options) {\n  if (options.workerType === 'web') { // browser only\n    ensureWebWorker();\n    return setupBrowserWorker(script, options.workerOpts, Worker);\n  } else if (options.workerType === 'thread') { // node.js only\n    WorkerThreads = ensureWorkerThreads();\n    return setupWorkerThreadWorker(script, WorkerThreads, options);\n  } else if (options.workerType === 'process' || !options.workerType) { // node.js only\n    return setupProcessWorker(script, resolveForkOptions(options), require('child_process'));\n  } else { // options.workerType === 'auto' or undefined\n    if (environment.platform === 'browser') {\n      ensureWebWorker();\n      return setupBrowserWorker(script, options.workerOpts, Worker);\n    }\n    else { // environment.platform === 'node'\n      var WorkerThreads = tryRequireWorkerThreads();\n      if (WorkerThreads) {\n        return setupWorkerThreadWorker(script, WorkerThreads, options);\n      } else {\n        return setupProcessWorker(script, resolveForkOptions(options), require('child_process'));\n      }\n    }\n  }\n}\n\nfunction setupBrowserWorker(script, workerOpts, Worker) {\n  // validate the options right before creating the worker (not when creating the pool)\n  validateOptions(workerOpts, workerOptsNames, 'workerOpts')\n\n  // create the web worker\n  var worker = new Worker(script, workerOpts);\n\n  worker.isBrowserWorker = true;\n  // add node.js API to the web worker\n  worker.on = function (event, callback) {\n    this.addEventListener(event, function (message) {\n      callback(message.data);\n    });\n  };\n  worker.send = function (message, transfer) {\n    this.postMessage(message, transfer);\n  };\n  return worker;\n}\n\nfunction setupWorkerThreadWorker(script, WorkerThreads, options) {\n  // validate the options right before creating the worker thread (not when creating the pool)\n  validateOptions(options?.workerThreadOpts, workerThreadOptsNames, 'workerThreadOpts')\n\n  var worker = new WorkerThreads.Worker(script, {\n    stdout: options?.emitStdStreams ?? false, // pipe worker.STDOUT to process.STDOUT if not requested\n    stderr: options?.emitStdStreams ?? false,  // pipe worker.STDERR to process.STDERR if not requested\n    ...options?.workerThreadOpts\n  });\n  worker.isWorkerThread = true;\n  worker.send = function(message, transfer) {\n    this.postMessage(message, transfer);\n  };\n\n  worker.kill = function() {\n    this.terminate();\n    return true;\n  };\n\n  worker.disconnect = function() {\n    this.terminate();\n  };\n\n  if (options?.emitStdStreams) {\n    worker.stdout.on('data', (data) => worker.emit(\"stdout\", data))\n    worker.stderr.on('data', (data) => worker.emit(\"stderr\", data))\n  }\n\n  return worker;\n}\n\nfunction setupProcessWorker(script, options, child_process) {\n  // validate the options right before creating the child process (not when creating the pool)\n  validateOptions(options.forkOpts, forkOptsNames, 'forkOpts')\n\n  // no WorkerThreads, fallback to sub-process based workers\n  var worker = child_process.fork(\n    script,\n    options.forkArgs,\n    options.forkOpts\n  );\n\n  // ignore transfer argument since it is not supported by process\n  var send = worker.send;\n  worker.send = function (message) {\n    return send.call(worker, message);\n  };\n\n  if (options.emitStdStreams) {\n    worker.stdout.on('data', (data) => worker.emit(\"stdout\", data))\n    worker.stderr.on('data', (data) => worker.emit(\"stderr\", data))\n  }\n\n  worker.isChildProcess = true;\n  return worker;\n}\n\n// add debug flags to child processes if the node inspector is active\nfunction resolveForkOptions(opts) {\n  opts = opts || {};\n\n  var processExecArgv = process.execArgv.join(' ');\n  var inspectorActive = processExecArgv.indexOf('--inspect') !== -1;\n  var debugBrk = processExecArgv.indexOf('--debug-brk') !== -1;\n\n  var execArgv = [];\n  if (inspectorActive) {\n    execArgv.push('--inspect=' + opts.debugPort);\n\n    if (debugBrk) {\n      execArgv.push('--debug-brk');\n    }\n  }\n\n  process.execArgv.forEach(function(arg) {\n    if (arg.indexOf('--max-old-space-size') > -1) {\n      execArgv.push(arg)\n    }\n  })\n\n  return Object.assign({}, opts, {\n    forkArgs: opts.forkArgs,\n    forkOpts: Object.assign({}, opts.forkOpts, {\n      execArgv: (opts.forkOpts && opts.forkOpts.execArgv || [])\n      .concat(execArgv),\n      stdio: opts.emitStdStreams ? \"pipe\": undefined\n    })\n  });\n}\n\n/**\n * Converts a serialized error to Error\n * @param {Object} obj Error that has been serialized and parsed to object\n * @return {Error} The equivalent Error.\n */\nfunction objectToError (obj) {\n  var temp = new Error('')\n  var props = Object.keys(obj)\n\n  for (var i = 0; i < props.length; i++) {\n    temp[props[i]] = obj[props[i]]\n  }\n\n  return temp\n}\n\nfunction handleEmittedStdPayload(handler, payload) {\n  // TODO: refactor if parallel task execution gets added\n  if (Object.keys(handler.processing).length !== 1) {\n    return;\n  }\n  var task = Object.values(handler.processing)[0]\n  if (task.options && typeof task.options.on === 'function') {\n    task.options.on(payload);\n  }\n}\n\n/**\n * A WorkerHandler controls a single worker. This worker can be a child process\n * on node.js or a WebWorker in a browser environment.\n * @param {String} [script] If no script is provided, a default worker with a\n *                          function run will be created.\n * @param {import('./types.js').WorkerPoolOptions} [_options] See docs\n * @constructor\n */\nfunction WorkerHandler(script, _options) {\n  var me = this;\n  var options = _options || {};\n\n  this.script = script || getDefaultWorker();\n  this.worker = setupWorker(this.script, options);\n  this.debugPort = options.debugPort;\n  this.forkOpts = options.forkOpts;\n  this.forkArgs = options.forkArgs;\n  this.workerOpts = options.workerOpts;\n  this.workerThreadOpts = options.workerThreadOpts\n  this.workerTerminateTimeout = options.workerTerminateTimeout;\n\n  // The ready message is only sent if the worker.add method is called (And the default script is not used)\n  if (!script) {\n    this.worker.ready = true;\n  }\n\n  // queue for requests that are received before the worker is ready\n  this.requestQueue = [];\n\n  this.worker.on(\"stdout\", function (data) {\n    handleEmittedStdPayload(me, {\"stdout\": data.toString()})\n  })\n  this.worker.on(\"stderr\", function (data) {\n    handleEmittedStdPayload(me, {\"stderr\": data.toString()})\n  })\n\n  this.worker.on('message', function (response) {\n    if (me.terminated) {\n      return;\n    }\n    if (typeof response === 'string' && response === 'ready') {\n      me.worker.ready = true;\n      dispatchQueuedRequests();\n    } else {\n      // find the task from the processing queue, and run the tasks callback\n      var id = response.id;\n      var task = me.processing[id];\n      if (task !== undefined) {\n        if (response.isEvent) {\n          if (task.options && typeof task.options.on === 'function') {\n            task.options.on(response.payload);\n          }\n        } else {\n          // remove the task from the queue\n          delete me.processing[id];\n\n          // test if we need to terminate\n          if (me.terminating === true) {\n            // complete worker termination if all tasks are finished\n            me.terminate();\n          }\n\n          // resolve the task's promise\n          if (response.error) {\n            task.resolver.reject(objectToError(response.error));\n          }\n          else {\n            task.resolver.resolve(response.result);\n          }\n        }\n      }\n\n      if (response.method === CLEANUP_METHOD_ID) {\n        var trackedTask = me.tracking[response.id];\n        if (trackedTask !== undefined) {\n          if (response.error) {\n            clearTimeout(trackedTask.timeoutId);\n            trackedTask.resolver.reject(objectToError(response.error))\n          } else {\n            me.tracking && clearTimeout(trackedTask.timeoutId);\n            trackedTask.resolver.resolve(trackedTask.result);            \n          }\n        }\n        delete me.tracking[id];\n      }\n    }\n  });\n\n  // reject all running tasks on worker error\n  function onError(error) {\n    me.terminated = true;\n\n    for (var id in me.processing) {\n      if (me.processing[id] !== undefined) {\n        me.processing[id].resolver.reject(error);\n      }\n    }\n    \n    me.processing = Object.create(null);\n  }\n\n  // send all queued requests to worker\n  function dispatchQueuedRequests()\n  {\n    for(const request of me.requestQueue.splice(0)) {\n      me.worker.send(request.message, request.transfer);\n    }\n  }\n\n  var worker = this.worker;\n  // listen for worker messages error and exit\n  this.worker.on('error', onError);\n  this.worker.on('exit', function (exitCode, signalCode) {\n    var message = 'Workerpool Worker terminated Unexpectedly\\n';\n\n    message += '    exitCode: `' + exitCode + '`\\n';\n    message += '    signalCode: `' + signalCode + '`\\n';\n\n    message += '    workerpool.script: `' +  me.script + '`\\n';\n    message += '    spawnArgs: `' +  worker.spawnargs + '`\\n';\n    message += '    spawnfile: `' + worker.spawnfile + '`\\n'\n\n    message += '    stdout: `' + worker.stdout + '`\\n'\n    message += '    stderr: `' + worker.stderr + '`\\n'\n\n    onError(new Error(message));\n  });\n\n  this.processing = Object.create(null); // queue with tasks currently in progress\n  this.tracking = Object.create(null); // queue with tasks being monitored for cleanup status\n  this.terminating = false;\n  this.terminated = false;\n  this.cleaning = false;\n  this.terminationHandler = null;\n  this.lastId = 0;\n}\n\n/**\n * Get a list with methods available on the worker.\n * @return {Promise.<String[], Error>} methods\n */\nWorkerHandler.prototype.methods = function () {\n  return this.exec('methods');\n};\n\n/**\n * Execute a method with given parameters on the worker\n * @param {String} method\n * @param {Array} [params]\n * @param {{resolve: Function, reject: Function}} [resolver]\n * @param {import('./types.js').ExecOptions}  [options]\n * @return {Promise.<*, Error>} result\n */\nWorkerHandler.prototype.exec = function(method, params, resolver, options) {\n  if (!resolver) {\n    resolver = Promise.defer();\n  }\n\n  // generate a unique id for the task\n  var id = ++this.lastId;\n\n  // register a new task as being in progress\n  this.processing[id] = {\n    id: id,\n    resolver: resolver,\n    options: options\n  };\n\n  // build a JSON-RPC request\n  var request = {\n    message: {\n      id: id,\n      method: method,\n      params: params\n    },\n    transfer: options && options.transfer\n  };\n\n  if (this.terminated) {\n    resolver.reject(new Error('Worker is terminated'));\n  } else if (this.worker.ready) {\n    // send the request to the worker\n    this.worker.send(request.message, request.transfer);\n  } else {\n    this.requestQueue.push(request);\n  }\n\n  // on cancellation, force the worker to terminate\n  var me = this;\n  return resolver.promise.catch(function (error) {\n    if (error instanceof Promise.CancellationError || error instanceof Promise.TimeoutError) {\n      me.tracking[id] = {\n        id,\n        resolver: Promise.defer()\n      };\n      \n      // remove this task from the queue. It is already rejected (hence this\n      // catch event), and else it will be rejected again when terminating\n      delete me.processing[id];\n\n      me.tracking[id].resolver.promise = me.tracking[id].resolver.promise.catch(function(err) {\n        delete me.tracking[id];\n\n        var promise = me.terminateAndNotify(true)\n          .then(function() { \n            throw err;\n          }, function(err) {\n            throw err;\n          });\n\n        return promise;\n      });\n \n      me.worker.send({\n        id,\n        method: CLEANUP_METHOD_ID \n      });\n      \n      \n      /**\n        * Sets a timeout to reject the cleanup operation if the message sent to the worker\n        * does not receive a response. see worker.tryCleanup for worker cleanup operations.\n        * Here we use the workerTerminateTimeout as the worker will be terminated if the timeout does invoke.\n        * \n        * We need this timeout in either case of a Timeout or Cancellation Error as if\n        * the worker does not send a message we still need to give a window of time for a response.\n        * \n        * The workerTermniateTimeout is used here if this promise is rejected the worker cleanup\n        * operations will occure.\n      */\n      me.tracking[id].timeoutId = setTimeout(function() {\n          me.tracking[id].resolver.reject(error);\n      }, me.workerTerminateTimeout);\n\n      return me.tracking[id].resolver.promise;\n    } else {\n      throw error;\n    }\n  })\n};\n\n/**\n * Test whether the worker is processing any tasks or cleaning up before termination.\n * @return {boolean} Returns true if the worker is busy\n */\nWorkerHandler.prototype.busy = function () {\n  return this.cleaning || Object.keys(this.processing).length > 0;\n};\n\n/**\n * Terminate the worker.\n * @param {boolean} [force=false]   If false (default), the worker is terminated\n *                                  after finishing all tasks currently in\n *                                  progress. If true, the worker will be\n *                                  terminated immediately.\n * @param {function} [callback=null] If provided, will be called when process terminates.\n */\nWorkerHandler.prototype.terminate = function (force, callback) {\n  var me = this;\n  if (force) {\n    // cancel all tasks in progress\n    for (var id in this.processing) {\n      if (this.processing[id] !== undefined) {\n        this.processing[id].resolver.reject(new Error('Worker terminated'));\n      }\n    }\n\n    this.processing = Object.create(null);\n  }\n\n  // If we are terminating, cancel all tracked task for cleanup\n  for (var task of Object.values(me.tracking)) {\n    clearTimeout(task.timeoutId);\n    task.resolver.reject(new Error('Worker Terminating'));\n  }\n\n  me.tracking = Object.create(null);\n\n  if (typeof callback === 'function') {\n    this.terminationHandler = callback;\n  }\n  if (!this.busy()) {\n    // all tasks are finished. kill the worker\n    var cleanup = function(err) {\n      me.terminated = true;\n      me.cleaning = false;\n\n      if (me.worker != null && me.worker.removeAllListeners) {\n        // removeAllListeners is only available for child_process\n        me.worker.removeAllListeners('message');\n      }\n      me.worker = null;\n      me.terminating = false;\n      if (me.terminationHandler) {\n        me.terminationHandler(err, me);\n      } else if (err) {\n        throw err;\n      }\n    }\n\n    if (this.worker) {\n      if (typeof this.worker.kill === 'function') {\n        if (this.worker.killed) {\n          cleanup(new Error('worker already killed!'));\n          return;\n        }\n\n        // child process and worker threads\n        var cleanExitTimeout = setTimeout(function() {\n          if (me.worker) {\n            me.worker.kill();\n          }\n        }, this.workerTerminateTimeout);\n\n        this.worker.once('exit', function() {\n          clearTimeout(cleanExitTimeout);\n          if (me.worker) {\n            me.worker.killed = true;\n          }\n          cleanup();\n        });\n\n        if (this.worker.ready) {\n          this.worker.send(TERMINATE_METHOD_ID);\n        } else {\n          this.requestQueue.push({ message: TERMINATE_METHOD_ID });\n        }\n\n        // mark that the worker is cleaning up resources\n        // to prevent new tasks from being executed\n        this.cleaning = true;\n        return;\n      }\n      else if (typeof this.worker.terminate === 'function') {\n        this.worker.terminate(); // web worker\n        this.worker.killed = true;\n      }\n      else {\n        throw new Error('Failed to terminate worker');\n      }\n    }\n    cleanup();\n  }\n  else {\n    // we can't terminate immediately, there are still tasks being executed\n    this.terminating = true;\n  }\n};\n\n/**\n * Terminate the worker, returning a Promise that resolves when the termination has been done.\n * @param {boolean} [force=false]   If false (default), the worker is terminated\n *                                  after finishing all tasks currently in\n *                                  progress. If true, the worker will be\n *                                  terminated immediately.\n * @param {number} [timeout]        If provided and non-zero, worker termination promise will be rejected\n *                                  after timeout if worker process has not been terminated.\n * @return {Promise.<WorkerHandler, Error>}\n */\nWorkerHandler.prototype.terminateAndNotify = function (force, timeout) {\n  var resolver = Promise.defer();\n  if (timeout) {\n    resolver.promise.timeout(timeout);\n  }\n  this.terminate(force, function(err, worker) {\n    if (err) {\n      resolver.reject(err);\n    } else {\n      resolver.resolve(worker);\n    }\n  });\n  return resolver.promise;\n};\n\nmodule.exports = WorkerHandler;\nmodule.exports._tryRequireWorkerThreads = tryRequireWorkerThreads;\nmodule.exports._setupProcessWorker = setupProcessWorker;\nmodule.exports._setupBrowserWorker = setupBrowserWorker;\nmodule.exports._setupWorkerThreadWorker = setupWorkerThreadWorker;\nmodule.exports.ensureWorkerThreads = ensureWorkerThreads;\n","/**\n * embeddedWorker.js contains an embedded version of worker.js.\n * This file is automatically generated,\n * changes made in this file will be overwritten.\n */\nmodule.exports = \"!function(e,n){\\\"object\\\"==typeof exports&&\\\"undefined\\\"!=typeof module?module.exports=n():\\\"function\\\"==typeof define&&define.amd?define(n):(e=\\\"undefined\\\"!=typeof globalThis?globalThis:e||self).worker=n()}(this,(function(){\\\"use strict\\\";function e(n){return e=\\\"function\\\"==typeof Symbol&&\\\"symbol\\\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\\\"function\\\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\\\"symbol\\\":typeof e},e(n)}function n(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\\\"default\\\")?e.default:e}var t={};var r=function(e,n){this.message=e,this.transfer=n},o={};function i(e,n){var t=this;if(!(this instanceof i))throw new SyntaxError(\\\"Constructor must be called with the new operator\\\");if(\\\"function\\\"!=typeof e)throw new SyntaxError(\\\"Function parameter handler(resolve, reject) missing\\\");var r=[],o=[];this.resolved=!1,this.rejected=!1,this.pending=!0;var a=function(e,n){r.push(e),o.push(n)};this.then=function(e,n){return new i((function(t,r){var o=e?u(e,t,r):t,i=n?u(n,t,r):r;a(o,i)}),t)};var f=function(e){return t.resolved=!0,t.rejected=!1,t.pending=!1,r.forEach((function(n){n(e)})),a=function(n,t){n(e)},f=d=function(){},t},d=function(e){return t.resolved=!1,t.rejected=!0,t.pending=!1,o.forEach((function(n){n(e)})),a=function(n,t){t(e)},f=d=function(){},t};this.cancel=function(){return n?n.cancel():d(new s),t},this.timeout=function(e){if(n)n.timeout(e);else{var r=setTimeout((function(){d(new c(\\\"Promise timed out after \\\"+e+\\\" ms\\\"))}),e);t.always((function(){clearTimeout(r)}))}return t},e((function(e){f(e)}),(function(e){d(e)}))}function u(e,n,t){return function(r){try{var o=e(r);o&&\\\"function\\\"==typeof o.then&&\\\"function\\\"==typeof o.catch?o.then(n,t):n(o)}catch(e){t(e)}}}function s(e){this.message=e||\\\"promise cancelled\\\",this.stack=(new Error).stack}function c(e){this.message=e||\\\"timeout exceeded\\\",this.stack=(new Error).stack}return i.prototype.catch=function(e){return this.then(null,e)},i.prototype.always=function(e){return this.then(e,e)},i.prototype.finally=function(e){var n=this,t=function(){return new i((function(e){return e()})).then(e).then((function(){return n}))};return this.then(t,t)},i.all=function(e){return new i((function(n,t){var r=e.length,o=[];r?e.forEach((function(e,i){e.then((function(e){o[i]=e,0==--r&&n(o)}),(function(e){r=0,t(e)}))})):n(o)}))},i.defer=function(){var e={};return e.promise=new i((function(n,t){e.resolve=n,e.reject=t})),e},s.prototype=new Error,s.prototype.constructor=Error,s.prototype.name=\\\"CancellationError\\\",i.CancellationError=s,c.prototype=new Error,c.prototype.constructor=Error,c.prototype.name=\\\"TimeoutError\\\",i.TimeoutError=c,o.Promise=i,function(n){var t=r,i=o.Promise,u=\\\"__workerpool-cleanup__\\\",s={exit:function(){}},c={addAbortListener:function(e){s.abortListeners.push(e)},emit:s.emit};if(\\\"undefined\\\"!=typeof self&&\\\"function\\\"==typeof postMessage&&\\\"function\\\"==typeof addEventListener)s.on=function(e,n){addEventListener(e,(function(e){n(e.data)}))},s.send=function(e,n){n?postMessage(e,n):postMessage(e)};else{if(\\\"undefined\\\"==typeof process)throw new Error(\\\"Script must be executed as a worker\\\");var a;try{a=require(\\\"worker_threads\\\")}catch(n){if(\\\"object\\\"!==e(n)||null===n||\\\"MODULE_NOT_FOUND\\\"!==n.code)throw n}if(a&&null!==a.parentPort){var f=a.parentPort;s.send=f.postMessage.bind(f),s.on=f.on.bind(f),s.exit=process.exit.bind(process)}else s.on=process.on.bind(process),s.send=function(e){process.send(e)},s.on(\\\"disconnect\\\",(function(){process.exit(1)})),s.exit=process.exit.bind(process)}function d(e){return Object.getOwnPropertyNames(e).reduce((function(n,t){return Object.defineProperty(n,t,{value:e[t],enumerable:!0})}),{})}function l(e){return e&&\\\"function\\\"==typeof e.then&&\\\"function\\\"==typeof e.catch}s.methods={},s.methods.run=function(e,n){var t=new Function(\\\"return (\\\"+e+\\\").apply(this, arguments);\\\");return t.worker=c,t.apply(t,n)},s.methods.methods=function(){return Object.keys(s.methods)},s.terminationHandler=void 0,s.abortListenerTimeout=1e3,s.abortListeners=[],s.terminateAndExit=function(e){var n=function(){s.exit(e)};if(!s.terminationHandler)return n();var t=s.terminationHandler(e);return l(t)?(t.then(n,n),t):(n(),new i((function(e,n){n(new Error(\\\"Worker terminating\\\"))})))},s.cleanup=function(e){if(!s.abortListeners.length)return s.send({id:e,method:u,error:d(new Error(\\\"Worker terminating\\\"))}),new i((function(e){e()}));var n,t=s.abortListeners.map((function(e){return e()})),r=new i((function(e,t){n=setTimeout((function(){t(new Error(\\\"Timeout occured waiting for abort handler, killing worker\\\"))}),s.abortListenerTimeout)})),o=i.all(t).then((function(){clearTimeout(n),s.abortListeners.length||(s.abortListeners=[])}),(function(){clearTimeout(n),s.exit()}));return i.all([o,r]).then((function(){s.send({id:e,method:u,error:null})}),(function(n){s.send({id:e,method:u,error:n?d(n):null})}))};var p=null;s.on(\\\"message\\\",(function(e){if(\\\"__workerpool-terminate__\\\"===e)return s.terminateAndExit(0);if(e.method===u)return s.cleanup(e.id);try{var n=s.methods[e.method];if(!n)throw new Error('Unknown method \\\"'+e.method+'\\\"');p=e.id;var r=n.apply(n,e.params);l(r)?r.then((function(n){n instanceof t?s.send({id:e.id,result:n.message,error:null},n.transfer):s.send({id:e.id,result:n,error:null}),p=null})).catch((function(n){s.send({id:e.id,result:null,error:d(n)}),p=null})):(r instanceof t?s.send({id:e.id,result:r.message,error:null},r.transfer):s.send({id:e.id,result:r,error:null}),p=null)}catch(n){s.send({id:e.id,result:null,error:d(n)})}})),s.register=function(e,n){if(e)for(var t in e)e.hasOwnProperty(t)&&(s.methods[t]=e[t],s.methods[t].worker=c);n&&(s.terminationHandler=n.onTerminate,s.abortListenerTimeout=n.abortListenerTimeout||1e3),s.send(\\\"ready\\\")},s.emit=function(e){if(p){if(e instanceof t)return void s.send({id:p,isEvent:!0,payload:e.message},e.transfer);s.send({id:p,isEvent:!0,payload:e})}},n.add=s.register,n.emit=s.emit}(t),n(t)}));\\n//# sourceMappingURL=worker.min.js.map\\n\";\n","var {Promise} = require('./Promise');\nvar WorkerHandler = require('./WorkerHandler');\nvar environment = require('./environment');\nvar DebugPortAllocator = require('./debug-port-allocator');\nvar DEBUG_PORT_ALLOCATOR = new DebugPortAllocator();\n/**\n * A pool to manage workers, which can be created using the function workerpool.pool.\n *\n * @param {String} [script]   Optional worker script\n * @param {import('./types.js').WorkerPoolOptions} [options]  See docs\n * @constructor\n */\nfunction Pool(script, options) {\n  if (typeof script === 'string') {\n    /** @readonly */\n    this.script = script || null;\n  }\n  else {\n    this.script = null;\n    options = script;\n  }\n\n  /** @private */\n  this.workers = [];  // queue with all workers\n  /** @private */\n  this.tasks = [];    // queue with tasks awaiting execution\n\n  options = options || {};\n\n  /** @readonly */\n  this.forkArgs = Object.freeze(options.forkArgs || []);\n  /** @readonly */\n  this.forkOpts = Object.freeze(options.forkOpts || {});\n  /** @readonly */\n  this.workerOpts = Object.freeze(options.workerOpts || {});\n  /** @readonly */\n  this.workerThreadOpts = Object.freeze(options.workerThreadOpts || {})\n  /** @private */\n  this.debugPortStart = (options.debugPortStart || 43210);\n  /** @readonly @deprecated */\n  this.nodeWorker = options.nodeWorker;\n  /** @readonly\n   * @type {'auto' | 'web' | 'process' | 'thread'}\n   */\n  this.workerType = options.workerType || options.nodeWorker || 'auto'\n  /** @readonly */\n  this.maxQueueSize = options.maxQueueSize || Infinity;\n  /** @readonly */\n  this.workerTerminateTimeout = options.workerTerminateTimeout || 1000;\n\n  /** @readonly */\n  this.onCreateWorker = options.onCreateWorker || (() => null);\n  /** @readonly */\n  this.onTerminateWorker = options.onTerminateWorker || (() => null);\n\n  /** @readonly */\n  this.emitStdStreams = options.emitStdStreams || false\n\n  // configuration\n  if (options && 'maxWorkers' in options) {\n    validateMaxWorkers(options.maxWorkers);\n    /** @readonly */\n    this.maxWorkers = options.maxWorkers;\n  }\n  else {\n    this.maxWorkers = Math.max((environment.cpus || 4) - 1, 1);\n  }\n\n  if (options && 'minWorkers' in options) {\n    if(options.minWorkers === 'max') {\n      /** @readonly */\n      this.minWorkers = this.maxWorkers;\n    } else {\n      validateMinWorkers(options.minWorkers);\n      this.minWorkers = options.minWorkers;\n      this.maxWorkers = Math.max(this.minWorkers, this.maxWorkers);     // in case minWorkers is higher than maxWorkers\n    }\n    this._ensureMinWorkers();\n  }\n\n  /** @private */\n  this._boundNext = this._next.bind(this);\n\n\n  if (this.workerType === 'thread') {\n    WorkerHandler.ensureWorkerThreads();\n  }\n}\n\n\n/**\n * Execute a function on a worker.\n *\n * Example usage:\n *\n *   var pool = new Pool()\n *\n *   // call a function available on the worker\n *   pool.exec('fibonacci', [6])\n *\n *   // offload a function\n *   function add(a, b) {\n *     return a + b\n *   };\n *   pool.exec(add, [2, 4])\n *       .then(function (result) {\n *         console.log(result); // outputs 6\n *       })\n *       .catch(function(error) {\n *         console.log(error);\n *       });\n * @template { (...args: any[]) => any } T\n * @param {String | T} method  Function name or function.\n *                                    If `method` is a string, the corresponding\n *                                    method on the worker will be executed\n *                                    If `method` is a Function, the function\n *                                    will be stringified and executed via the\n *                                    workers built-in function `run(fn, args)`.\n * @param {Parameters<T> | null} [params]  Function arguments applied when calling the function\n * @param {import('./types.js').ExecOptions} [options]  Options\n * @return {Promise<ReturnType<T>>}\n */\nPool.prototype.exec = function (method, params, options) {\n  // validate type of arguments\n  if (params && !Array.isArray(params)) {\n    throw new TypeError('Array expected as argument \"params\"');\n  }\n\n  if (typeof method === 'string') {\n    var resolver = Promise.defer();\n\n    if (this.tasks.length >= this.maxQueueSize) {\n      throw new Error('Max queue size of ' + this.maxQueueSize + ' reached');\n    }\n\n    // add a new task to the queue\n    var tasks = this.tasks;\n    var task = {\n      method:  method,\n      params:  params,\n      resolver: resolver,\n      timeout: null,\n      options: options\n    };\n    tasks.push(task);\n\n    // replace the timeout method of the Promise with our own,\n    // which starts the timer as soon as the task is actually started\n    var originalTimeout = resolver.promise.timeout;\n    resolver.promise.timeout = function timeout (delay) {\n      if (tasks.indexOf(task) !== -1) {\n        // task is still queued -> start the timer later on\n        task.timeout = delay;\n        return resolver.promise;\n      }\n      else {\n        // task is already being executed -> start timer immediately\n        return originalTimeout.call(resolver.promise, delay);\n      }\n    };\n\n    // trigger task execution\n    this._next();\n\n    return resolver.promise;\n  }\n  else if (typeof method === 'function') {\n    // send stringified function and function arguments to worker\n    return this.exec('run', [String(method), params], options);\n  }\n  else {\n    throw new TypeError('Function or string expected as argument \"method\"');\n  }\n};\n\n/**\n * Create a proxy for current worker. Returns an object containing all\n * methods available on the worker. All methods return promises resolving the methods result.\n * @template { { [k: string]: (...args: any[]) => any } } T\n * @return {Promise<import('./types.js').Proxy<T>, Error>} Returns a promise which resolves with a proxy object\n */\nPool.prototype.proxy = function () {\n  if (arguments.length > 0) {\n    throw new Error('No arguments expected');\n  }\n\n  var pool = this;\n  return this.exec('methods')\n      .then(function (methods) {\n        var proxy = {};\n\n        methods.forEach(function (method) {\n          proxy[method] = function () {\n            return pool.exec(method, Array.prototype.slice.call(arguments));\n          }\n        });\n\n        return proxy;\n      });\n};\n\n/**\n * Creates new array with the results of calling a provided callback function\n * on every element in this array.\n * @param {Array} array\n * @param {function} callback  Function taking two arguments:\n *                             `callback(currentValue, index)`\n * @return {Promise.<Array>} Returns a promise which resolves  with an Array\n *                           containing the results of the callback function\n *                           executed for each of the array elements.\n */\n/* TODO: implement map\nPool.prototype.map = function (array, callback) {\n};\n*/\n\n/**\n * Grab the first task from the queue, find a free worker, and assign the\n * worker to the task.\n * @private\n */\nPool.prototype._next = function () {\n  if (this.tasks.length > 0) {\n    // there are tasks in the queue\n\n    // find an available worker\n    var worker = this._getWorker();\n    if (worker) {\n      // get the first task from the queue\n      var me = this;\n      var task = this.tasks.shift();\n\n      // check if the task is still pending (and not cancelled -> promise rejected)\n      if (task.resolver.promise.pending) {\n        // send the request to the worker\n        var promise = worker.exec(task.method, task.params, task.resolver, task.options)\n          .then(me._boundNext)\n          .catch(function () {\n            // if the worker crashed and terminated, remove it from the pool\n            if (worker.terminated) {\n              return me._removeWorker(worker);\n            }\n          }).then(function() {\n            me._next(); // trigger next task in the queue\n          });\n\n        // start queued timer now\n        if (typeof task.timeout === 'number') {\n          promise.timeout(task.timeout);\n        }\n      } else {\n        // The task taken was already complete (either rejected or resolved), so just trigger next task in the queue\n        me._next();\n      }\n    }\n  }\n};\n\n/**\n * Get an available worker. If no worker is available and the maximum number\n * of workers isn't yet reached, a new worker will be created and returned.\n * If no worker is available and the maximum number of workers is reached,\n * null will be returned.\n *\n * @return {WorkerHandler | null} worker\n * @private\n */\nPool.prototype._getWorker = function() {\n  // find a non-busy worker\n  var workers = this.workers;\n  for (var i = 0; i < workers.length; i++) {\n    var worker = workers[i];\n    if (worker.busy() === false) {\n      return worker;\n    }\n  }\n\n  if (workers.length < this.maxWorkers) {\n    // create a new worker\n    worker = this._createWorkerHandler();\n    workers.push(worker);\n    return worker;\n  }\n\n  return null;\n};\n\n/**\n * Remove a worker from the pool.\n * Attempts to terminate worker if not already terminated, and ensures the minimum\n * pool size is met.\n * @param {WorkerHandler} worker\n * @return {Promise<WorkerHandler>}\n * @private\n */\nPool.prototype._removeWorker = function(worker) {\n  var me = this;\n\n  DEBUG_PORT_ALLOCATOR.releasePort(worker.debugPort);\n  // _removeWorker will call this, but we need it to be removed synchronously\n  this._removeWorkerFromList(worker);\n  // If minWorkers set, spin up new workers to replace the crashed ones\n  this._ensureMinWorkers();\n  // terminate the worker (if not already terminated)\n  return new Promise(function(resolve, reject) {\n    worker.terminate(false, function(err) {\n      me.onTerminateWorker({\n        forkArgs: worker.forkArgs,\n        forkOpts: worker.forkOpts,\n        workerThreadOpts: worker.workerThreadOpts,\n        script: worker.script\n      });\n      if (err) {\n        reject(err);\n      } else {\n        resolve(worker);\n      }\n    });\n  });\n};\n\n/**\n * Remove a worker from the pool list.\n * @param {WorkerHandler} worker\n * @private\n */\nPool.prototype._removeWorkerFromList = function(worker) {\n  // remove from the list with workers\n  var index = this.workers.indexOf(worker);\n  if (index !== -1) {\n    this.workers.splice(index, 1);\n  }\n};\n\n/**\n * Close all active workers. Tasks currently being executed will be finished first.\n * @param {boolean} [force=false]   If false (default), the workers are terminated\n *                                  after finishing all tasks currently in\n *                                  progress. If true, the workers will be\n *                                  terminated immediately.\n * @param {number} [timeout]        If provided and non-zero, worker termination promise will be rejected\n *                                  after timeout if worker process has not been terminated.\n * @return {Promise.<void, Error>}\n */\nPool.prototype.terminate = function (force, timeout) {\n  var me = this;\n\n  // cancel any pending tasks\n  this.tasks.forEach(function (task) {\n    task.resolver.reject(new Error('Pool terminated'));\n  });\n  this.tasks.length = 0;\n\n  var f = function (worker) {\n    DEBUG_PORT_ALLOCATOR.releasePort(worker.debugPort);\n    this._removeWorkerFromList(worker);\n  };\n  var removeWorker = f.bind(this);\n\n  var promises = [];\n  var workers = this.workers.slice();\n  workers.forEach(function (worker) {\n    var termPromise = worker.terminateAndNotify(force, timeout)\n      .then(removeWorker)\n      .always(function() {\n        me.onTerminateWorker({\n          forkArgs: worker.forkArgs,\n          forkOpts: worker.forkOpts,\n          workerThreadOpts: worker.workerThreadOpts,\n          script: worker.script\n        });\n      });\n    promises.push(termPromise);\n  });\n  return Promise.all(promises);\n};\n\n/**\n * Retrieve statistics on tasks and workers.\n * @return {{totalWorkers: number, busyWorkers: number, idleWorkers: number, pendingTasks: number, activeTasks: number}} Returns an object with statistics\n */\nPool.prototype.stats = function () {\n  var totalWorkers = this.workers.length;\n  var busyWorkers = this.workers.filter(function (worker) {\n    return worker.busy();\n  }).length;\n\n  return {\n    totalWorkers:  totalWorkers,\n    busyWorkers:   busyWorkers,\n    idleWorkers:   totalWorkers - busyWorkers,\n\n    pendingTasks:  this.tasks.length,\n    activeTasks:   busyWorkers\n  };\n};\n\n/**\n * Ensures that a minimum of minWorkers is up and running\n * @private\n */\nPool.prototype._ensureMinWorkers = function() {\n  if (this.minWorkers) {\n    for(var i = this.workers.length; i < this.minWorkers; i++) {\n      this.workers.push(this._createWorkerHandler());\n    }\n  }\n};\n\n/**\n * Helper function to create a new WorkerHandler and pass all options.\n * @return {WorkerHandler}\n * @private\n */\nPool.prototype._createWorkerHandler = function () {\n  const overriddenParams = this.onCreateWorker({\n    forkArgs: this.forkArgs,\n    forkOpts: this.forkOpts,\n    workerOpts: this.workerOpts,\n    workerThreadOpts: this.workerThreadOpts,\n    script: this.script\n  }) || {};\n\n  return new WorkerHandler(overriddenParams.script || this.script, {\n    forkArgs: overriddenParams.forkArgs || this.forkArgs,\n    forkOpts: overriddenParams.forkOpts || this.forkOpts,\n    workerOpts: overriddenParams.workerOpts || this.workerOpts,\n    workerThreadOpts: overriddenParams.workerThreadOpts || this.workerThreadOpts,\n    debugPort: DEBUG_PORT_ALLOCATOR.nextAvailableStartingAt(this.debugPortStart),\n    workerType: this.workerType,\n    workerTerminateTimeout: this.workerTerminateTimeout,\n    emitStdStreams: this.emitStdStreams,\n  });\n}\n\n/**\n * Ensure that the maxWorkers option is an integer >= 1\n * @param {*} maxWorkers\n * @returns {boolean} returns true maxWorkers has a valid value\n */\nfunction validateMaxWorkers(maxWorkers) {\n  if (!isNumber(maxWorkers) || !isInteger(maxWorkers) || maxWorkers < 1) {\n    throw new TypeError('Option maxWorkers must be an integer number >= 1');\n  }\n}\n\n/**\n * Ensure that the minWorkers option is an integer >= 0\n * @param {*} minWorkers\n * @returns {boolean} returns true when minWorkers has a valid value\n */\nfunction validateMinWorkers(minWorkers) {\n  if (!isNumber(minWorkers) || !isInteger(minWorkers) || minWorkers < 0) {\n    throw new TypeError('Option minWorkers must be an integer number >= 0');\n  }\n}\n\n/**\n * Test whether a variable is a number\n * @param {*} value\n * @returns {boolean} returns true when value is a number\n */\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n/**\n * Test whether a number is an integer\n * @param {number} value\n * @returns {boolean} Returns true if value is an integer\n */\nfunction isInteger(value) {\n  return Math.round(value) == value;\n}\n\nmodule.exports = Pool;\n","'use strict';\n\nvar MAX_PORTS = 65535;\nmodule.exports = DebugPortAllocator;\nfunction DebugPortAllocator() {\n  this.ports = Object.create(null);\n  this.length = 0;\n}\n\nDebugPortAllocator.prototype.nextAvailableStartingAt = function(starting) {\n  while (this.ports[starting] === true) {\n    starting++;\n  }\n\n  if (starting >= MAX_PORTS) {\n    throw new Error('WorkerPool debug port limit reached: ' + starting + '>= ' + MAX_PORTS );\n  }\n\n  this.ports[starting] = true;\n  this.length++;\n  return starting;\n};\n\nDebugPortAllocator.prototype.releasePort = function(port) {\n  delete this.ports[port];\n  this.length--;\n};\n\n","/**\n * The helper class for transferring data from the worker to the main thread.\n *\n * @param {Object} message The object to deliver to the main thread.\n * @param {Object[]} transfer An array of transferable Objects to transfer ownership of.\n */\nfunction Transfer(message, transfer) {\n  this.message = message;\n  this.transfer = transfer;\n}\n\nmodule.exports = Transfer;\n","/**\n * worker must be started as a child process or a web worker.\n * It listens for RPC messages from the parent process.\n */\n\nvar Transfer = require('./transfer');\n\n/**\n * worker must handle async cleanup handlers. Use custom Promise implementation. \n*/\nvar Promise = require('./Promise').Promise;\n/**\n * Special message sent by parent which causes the worker to terminate itself.\n * Not a \"message object\"; this string is the entire message.\n */\nvar TERMINATE_METHOD_ID = '__workerpool-terminate__';\n\n/**\n * Special message by parent which causes a child process worker to perform cleaup\n * steps before determining if the child process worker should be terminated.\n*/\nvar CLEANUP_METHOD_ID = '__workerpool-cleanup__';\n// var nodeOSPlatform = require('./environment').nodeOSPlatform;\n\n\nvar TIMEOUT_DEFAULT = 1_000;\n\n// create a worker API for sending and receiving messages which works both on\n// node.js and in the browser\nvar worker = {\n  exit: function() {}\n};\n\n// api for in worker communication with parent process\n// works in both node.js and the browser\nvar publicWorker = {\n  /**\n   * \n   * @param {() => Promise<void>} listener \n   */\n  addAbortListener: function(listener) {\n    worker.abortListeners.push(listener);\n  },\n\n  emit: worker.emit\n};\n\nif (typeof self !== 'undefined' && typeof postMessage === 'function' && typeof addEventListener === 'function') {\n  // worker in the browser\n  worker.on = function (event, callback) {\n    addEventListener(event, function (message) {\n      callback(message.data);\n    })\n  };\n  worker.send = function (message, transfer) {\n     transfer ? postMessage(message, transfer) : postMessage (message);\n  };\n}\nelse if (typeof process !== 'undefined') {\n  // node.js\n\n  var WorkerThreads;\n  try {\n    WorkerThreads = require('worker_threads');\n  } catch(error) {\n    if (typeof error === 'object' && error !== null && error.code === 'MODULE_NOT_FOUND') {\n      // no worker_threads, fallback to sub-process based workers\n    } else {\n      throw error;\n    }\n  }\n\n  if (WorkerThreads &&\n    /* if there is a parentPort, we are in a WorkerThread */\n    WorkerThreads.parentPort !== null) {\n    var parentPort  = WorkerThreads.parentPort;\n    worker.send = parentPort.postMessage.bind(parentPort);\n    worker.on = parentPort.on.bind(parentPort);\n    worker.exit = process.exit.bind(process);\n  } else {\n    worker.on = process.on.bind(process);\n    // ignore transfer argument since it is not supported by process\n    worker.send = function (message) {\n      process.send(message);\n    };\n    // register disconnect handler only for subprocess worker to exit when parent is killed unexpectedly\n    worker.on('disconnect', function () {\n      process.exit(1);\n    });\n    worker.exit = process.exit.bind(process);\n  }\n}\nelse {\n  throw new Error('Script must be executed as a worker');\n}\n\nfunction convertError(error) {\n  return Object.getOwnPropertyNames(error).reduce(function(product, name) {\n    return Object.defineProperty(product, name, {\n\tvalue: error[name],\n\tenumerable: true\n    });\n  }, {});\n}\n\n/**\n * Test whether a value is a Promise via duck typing.\n * @param {*} value\n * @returns {boolean} Returns true when given value is an object\n *                    having functions `then` and `catch`.\n */\nfunction isPromise(value) {\n  return value && (typeof value.then === 'function') && (typeof value.catch === 'function');\n}\n\n// functions available externally\nworker.methods = {};\n\n/**\n * Execute a function with provided arguments\n * @param {String} fn     Stringified function\n * @param {Array} [args]  Function arguments\n * @returns {*}\n */\nworker.methods.run = function run(fn, args) {\n  var f = new Function('return (' + fn + ').apply(this, arguments);');\n  f.worker = publicWorker;\n  return f.apply(f, args);\n};\n\n/**\n * Get a list with methods available on this worker\n * @return {String[]} methods\n */\nworker.methods.methods = function methods() {\n  return Object.keys(worker.methods);\n};\n\n/**\n * Custom handler for when the worker is terminated.\n */\nworker.terminationHandler = undefined;\n\nworker.abortListenerTimeout = TIMEOUT_DEFAULT;\n\n/**\n * Abort handlers for resolving errors which may cause a timeout or cancellation\n * to occur from a worker context\n */\nworker.abortListeners = [];\n\n/**\n * Cleanup and exit the worker.\n * @param {Number} code \n * @returns {Promise<void>}\n */\nworker.terminateAndExit = function(code) {\n  var _exit = function() {\n    worker.exit(code);\n  }\n\n  if(!worker.terminationHandler) {\n    return _exit();\n  }\n  \n  var result = worker.terminationHandler(code);\n  if (isPromise(result)) {\n    result.then(_exit, _exit);\n\n    return result;\n  } else {\n    _exit();\n    return new Promise(function (_resolve, reject) {\n      reject(new Error(\"Worker terminating\"));\n    });\n  }\n}\n\n\n\n/**\n  * Called within the worker message handler to run abort handlers if registered to perform cleanup operations.\n  * @param {Integer} [requestId] id of task which is currently executing in the worker\n  * @return {Promise<void>}\n*/\nworker.cleanup = function(requestId) {\n\n  if (!worker.abortListeners.length) {\n    worker.send({\n      id: requestId,\n      method: CLEANUP_METHOD_ID,\n      error: convertError(new Error('Worker terminating')),\n    });\n\n    // If there are no handlers registered, reject the promise with an error as we want the handler to be notified\n    // that cleanup should begin and the handler should be GCed.\n    return new Promise(function(resolve) { resolve(); });\n  }\n  \n\n  var _exit = function() {\n    worker.exit();\n  }\n\n  var _abort = function() {\n    if (!worker.abortListeners.length) {\n      worker.abortListeners = [];\n    }\n  }\n\n  const promises = worker.abortListeners.map(listener => listener());\n  let timerId;\n  const timeoutPromise = new Promise((_resolve, reject) => {\n    timerId = setTimeout(function () { \n      reject(new Error('Timeout occured waiting for abort handler, killing worker'));\n    }, worker.abortListenerTimeout);\n  });\n\n  // Once a promise settles we need to clear the timeout to prevet fulfulling the promise twice \n  const settlePromise = Promise.all(promises).then(function() {\n    clearTimeout(timerId);\n    _abort();\n  }, function() {\n    clearTimeout(timerId);\n    _exit();\n  });\n\n  // Returns a promise which will result in one of the following cases\n  // - Resolve once all handlers resolve\n  // - Reject if one or more handlers exceed the 'abortListenerTimeout' interval\n  // - Reject if one or more handlers reject\n  // Upon one of the above cases a message will be sent to the handler with the result of the handler execution\n  // which will either kill the worker if the result contains an error, or \n  return Promise.all([\n    settlePromise,\n    timeoutPromise\n  ]).then(function() {\n    worker.send({\n      id: requestId,\n      method: CLEANUP_METHOD_ID,\n      error: null,\n    });\n  }, function(err) {\n    worker.send({\n      id: requestId,\n      method: CLEANUP_METHOD_ID,\n      error: err ? convertError(err) : null,\n    });\n  });\n}\n\nvar currentRequestId = null;\n\nworker.on('message', function (request) {\n  if (request === TERMINATE_METHOD_ID) {\n    return worker.terminateAndExit(0);\n  }\n\n  if (request.method === CLEANUP_METHOD_ID) {\n    return worker.cleanup(request.id);\n  }\n\n  try {\n    var method = worker.methods[request.method];\n\n    if (method) {\n      currentRequestId = request.id;\n      \n      // execute the function\n      var result = method.apply(method, request.params);\n\n      if (isPromise(result)) {\n        // promise returned, resolve this and then return\n        result\n            .then(function (result) {\n              if (result instanceof Transfer) {\n                worker.send({\n                  id: request.id,\n                  result: result.message,\n                  error: null\n                }, result.transfer);\n              } else {\n                worker.send({\n                  id: request.id,\n                  result: result,\n                  error: null\n                });\n              }\n              currentRequestId = null;\n            })\n            .catch(function (err) {\n              worker.send({\n                id: request.id,\n                result: null,\n                error: convertError(err),\n              });\n              currentRequestId = null;\n            });\n      }\n      else {\n        // immediate result\n        if (result instanceof Transfer) {\n          worker.send({\n            id: request.id,\n            result: result.message,\n            error: null\n          }, result.transfer);\n        } else {\n          worker.send({\n            id: request.id,\n            result: result,\n            error: null\n          });\n        }\n\n        currentRequestId = null;\n      }\n    }\n    else {\n      throw new Error('Unknown method \"' + request.method + '\"');\n    }\n  }\n  catch (err) {\n    worker.send({\n      id: request.id,\n      result: null,\n      error: convertError(err)\n    });\n  }\n});\n\n/**\n * Register methods to the worker\n * @param {Object} [methods]\n * @param {import('./types.js').WorkerRegisterOptions} [options]\n */\nworker.register = function (methods, options) {\n\n  if (methods) {\n    for (var name in methods) {\n      if (methods.hasOwnProperty(name)) {\n        worker.methods[name] = methods[name];\n        worker.methods[name].worker = publicWorker;\n      }\n    }\n  }\n\n  if (options) {\n    worker.terminationHandler = options.onTerminate;\n    // register listener timeout or default to 1 second\n    worker.abortListenerTimeout = options.abortListenerTimeout || TIMEOUT_DEFAULT;\n  }\n\n  worker.send('ready');\n};\n\nworker.emit = function (payload) {\n  if (currentRequestId) {\n    if (payload instanceof Transfer) {\n      worker.send({\n        id: currentRequestId,\n        isEvent: true,\n        payload: payload.message\n      }, payload.transfer);\n      return;\n    }\n\n    worker.send({\n      id: currentRequestId,\n      isEvent: true,\n      payload\n    });\n  }\n};\n\n\nif (typeof exports !== 'undefined') {\n  exports.add = worker.register;\n  exports.emit = worker.emit;\n}\n","const {platform, isMainThread, cpus} = require('./environment');\n\n/** @typedef {import(\"./Pool\")} Pool */\n/** @typedef {import(\"./types.js\").WorkerPoolOptions} WorkerPoolOptions */\n/** @typedef {import(\"./types.js\").WorkerRegisterOptions} WorkerRegisterOptions */\n\n/**\n * @template { { [k: string]: (...args: any[]) => any } } T\n * @typedef {import('./types.js').Proxy<T>} Proxy<T>\n */\n\n/**\n * @overload\n * Create a new worker pool\n * @param {WorkerPoolOptions} [script]\n * @returns {Pool} pool\n */\n/**\n * @overload\n * Create a new worker pool\n * @param {string} [script]\n * @param {WorkerPoolOptions} [options]\n * @returns {Pool} pool\n */\nfunction pool(script, options) {\n  var Pool = require('./Pool');\n\n  return new Pool(script, options);\n};\nexports.pool = pool;\n\n/**\n * Create a worker and optionally register a set of methods to the worker.\n * @param {{ [k: string]: (...args: any[]) => any }} [methods]\n * @param {WorkerRegisterOptions} [options]\n */\nfunction worker(methods, options) {\n  var worker = require('./worker');\n  worker.add(methods, options);\n};\nexports.worker = worker;\n\n/**\n * Sends an event to the parent worker pool.\n * @param {any} payload \n */\nfunction workerEmit(payload) {\n  var worker = require('./worker');\n  worker.emit(payload);\n};\nexports.workerEmit = workerEmit;\n\nconst {Promise} = require('./Promise');\nexports.Promise = Promise;\n\nexports.Transfer = require('./transfer');\n\nexports.platform = platform;\nexports.isMainThread = isMainThread;\nexports.cpus = cpus;\n"],"names":["isNode","nodeProcess","versions","node","module","exports","platform","process","worker_threads","require","isMainThread","connected","Window","cpus","self","navigator","hardwareConcurrency","length","Promise","handler","parent","me","this","SyntaxError","_onSuccess","_onFail","resolved","rejected","pending","_process","onSuccess","onFail","push","then","resolve","reject","s","_then","f","_resolve","result","forEach","fn","_reject","error","cancel","CancellationError","timeout","delay","timer","setTimeout","TimeoutError","always","clearTimeout","callback","res","message","stack","Error","prototype","finally","final","all","promises","remaining","results","p","i","defer","resolver","promise","constructor","name","_Promise","validateOptions","options","allowedOptionNames","objectName","optionNames","Object","keys","unknownOptionName","find","optionName","includes","illegalOptionName","allowedOptionName","workerOptsNames","forkOptsNames","workerThreadOptsNames","require$$0","environment","require$$1","_require$$2","require$$2","TERMINATE_METHOD_ID","CLEANUP_METHOD_ID","ensureWorkerThreads","WorkerThreads","tryRequireWorkerThreads","ensureWebWorker","Worker","_typeof","code","setupBrowserWorker","script","workerOpts","worker","isBrowserWorker","on","event","addEventListener","data","send","transfer","postMessage","setupWorkerThreadWorker","_options$emitStdStrea","_options$emitStdStrea2","workerThreadOpts","_objectSpread","stdout","emitStdStreams","stderr","isWorkerThread","kill","terminate","disconnect","emit","setupProcessWorker","child_process","forkOpts","fork","forkArgs","call","isChildProcess","resolveForkOptions","opts","processExecArgv","execArgv","join","inspectorActive","indexOf","debugBrk","debugPort","arg","assign","concat","stdio","undefined","objectToError","obj","temp","props","handleEmittedStdPayload","payload","processing","task","values","WorkerHandler","_options","onError","id","terminated","create","Blob","window","URL","createObjectURL","blob","embeddedWorker","type","__dirname","getDefaultWorker","workerType","setupWorker","workerTerminateTimeout","ready","requestQueue","toString","response","_step","_iterator","_createForOfIteratorHelper","splice","n","done","request","value","err","e","dispatchQueuedRequests","isEvent","terminating","method","trackedTask","tracking","timeoutId","exitCode","signalCode","spawnargs","spawnfile","cleaning","terminationHandler","lastId","methods","exec","params","catch","terminateAndNotify","busy","force","_i","_Object$values","cleanup","removeAllListeners","killed","cleanExitTimeout","once","WorkerHandlerModule","_tryRequireWorkerThreads","_setupProcessWorker","_setupBrowserWorker","_setupWorkerThreadWorker","DEBUG_PORT_ALLOCATOR","DebugPortAllocator","ports","debugPortAllocator","nextAvailableStartingAt","starting","releasePort","port","require$$3","Pool","workers","tasks","freeze","debugPortStart","nodeWorker","maxQueueSize","Infinity","onCreateWorker","onTerminateWorker","maxWorkers","isNumber","isInteger","TypeError","validateMaxWorkers","Math","max","minWorkers","validateMinWorkers","_ensureMinWorkers","_boundNext","_next","bind","round","Array","isArray","originalTimeout","String","proxy","arguments","pool","slice","_getWorker","shift","_removeWorker","_createWorkerHandler","_removeWorkerFromList","index","removeWorker","termPromise","stats","totalWorkers","busyWorkers","filter","idleWorkers","pendingTasks","activeTasks","overriddenParams","Pool_1","Transfer","exit","publicWorker","addAbortListener","listener","abortListeners","parentPort","convertError","getOwnPropertyNames","reduce","product","defineProperty","enumerable","isPromise","run","args","Function","apply","abortListenerTimeout","terminateAndExit","_exit","requestId","timerId","map","timeoutPromise","settlePromise","currentRequestId","register","hasOwnProperty","onTerminate","add","pool_1","src","worker_1","workerEmit_1","workerEmit","require$$4","platform_1","isMainThread_1","cpus_1"],"mappings":"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"}